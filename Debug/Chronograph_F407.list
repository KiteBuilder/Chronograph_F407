
Chronograph_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae0  08006ae0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae8  08006ae8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08006af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          00000410  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001171a  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fd6  00000000  00000000  00031885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001020  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c57  00000000  00000000  00035880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c03  00000000  00000000  000364d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015587  00000000  00000000  0005a0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf810  00000000  00000000  0006f661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048bc  00000000  00000000  0013ee74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00143730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066c4 	.word	0x080066c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080066c4 	.word	0x080066c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
    //Initialize all used variables
    tim10_elapsed_cnt = 0;
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <main+0xe4>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
    tim10_reminder = 0;
 8000578:	4b36      	ldr	r3, [pc, #216]	; (8000654 <main+0xe8>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
    f_calc = false;
 800057e:	4b36      	ldr	r3, [pc, #216]	; (8000658 <main+0xec>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
    f_error =  false;
 8000584:	4b35      	ldr	r3, [pc, #212]	; (800065c <main+0xf0>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
    f_start = false;
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <main+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
    object_speed = 0;
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <main+0xf8>)
 8000592:	2200      	movs	r2, #0
 8000594:	801a      	strh	r2, [r3, #0]
    object_time_us = 0;
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <main+0xfc>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
    measure_cnt = 0;
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <main+0x100>)
 800059e:	2200      	movs	r2, #0
 80005a0:	801a      	strh	r2, [r3, #0]
    Modbus_Ctrl_Reg = 0;
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <main+0x104>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 f80c 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f868 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f9ac 	bl	800090c <MX_GPIO_Init>
  MX_TIM10_Init();
 80005b4:	f000 f932 	bl	800081c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f97e 	bl	80008b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80005bc:	f000 f8e2 	bl	8000784 <MX_TIM3_Init>
  MX_UART4_Init();
 80005c0:	f000 f950 	bl	8000864 <MX_UART4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005c4:	f000 f8ba 	bl	800073c <MX_NVIC_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN 2 */
    __disable_irq();

    HAL_GPIO_LockPin(OSC_En_GPIO_Port, OSC_En_Pin); //LOCK this pin settings because they are important - this pin enables HSE generator
 80005cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d0:	4828      	ldr	r0, [pc, #160]	; (8000674 <main+0x108>)
 80005d2:	f001 fc6a 	bl	8001eaa <HAL_GPIO_LockPin>

    SET_BIT(Modbus_Ctrl_Reg, INT_EDGE); //default edge for the EXTI0/EXTI1 interrupt is rising
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <main+0x104>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <main+0x104>)
 80005e2:	701a      	strb	r2, [r3, #0]

    //Disable EXTI0/1 IRQs until measurement process wasn't initiated
    HAL_NVIC_DisableIRQ(Gate_In_EXTI_IRQn);
 80005e4:	2006      	movs	r0, #6
 80005e6:	f001 f9c8 	bl	800197a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(Gate_Out_EXTI_IRQn);
 80005ea:	2007      	movs	r0, #7
 80005ec:	f001 f9c5 	bl	800197a <HAL_NVIC_DisableIRQ>

    //Setup Modbus RTU module and enable it
    MT_PORT_SetTimerModule(&htim3);
 80005f0:	4821      	ldr	r0, [pc, #132]	; (8000678 <main+0x10c>)
 80005f2:	f004 fd0f 	bl	8005014 <MT_PORT_SetTimerModule>
    MT_PORT_SetUartModule(&huart4); //use uart1 for debug purposes
 80005f6:	4821      	ldr	r0, [pc, #132]	; (800067c <main+0x110>)
 80005f8:	f004 fd1c 	bl	8005034 <MT_PORT_SetUartModule>
    eMBErrorCode eStatus;
    eStatus = eMBInit(MB_RTU, MODBUS_SLAVE_ADDRESS, 0, huart4.Init.BaudRate, MB_PAR_NONE);
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <main+0x110>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	2102      	movs	r1, #2
 8000608:	2000      	movs	r0, #0
 800060a:	f004 fb8d 	bl	8004d28 <eMBInit>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    eStatus = eMBEnable();
 8000612:	f004 fc05 	bl	8004e20 <eMBEnable>
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 800061a:	b662      	cpsie	i
}
 800061c:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      eMBPoll(); //Modbus polling function
 800061e:	f004 fc1b 	bl	8004e58 <eMBPoll>

      if (f_calc == true)
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <main+0xec>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b01      	cmp	r3, #1
 800062a:	d104      	bne.n	8000636 <main+0xca>
      {
          f_calc = false;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <main+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
          Calculate_Speed();
 8000632:	f000 fb93 	bl	8000d5c <Calculate_Speed>
      }

      if (f_error == true)
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <main+0xf0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1ee      	bne.n	800061e <main+0xb2>
      {
          f_error = false;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <main+0xf0>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
          object_speed = FALSE_START_SPEED_VAL;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <main+0xf8>)
 8000648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064c:	801a      	strh	r2, [r3, #0]
      eMBPoll(); //Modbus polling function
 800064e:	e7e6      	b.n	800061e <main+0xb2>
 8000650:	2000022c 	.word	0x2000022c
 8000654:	20000230 	.word	0x20000230
 8000658:	20000234 	.word	0x20000234
 800065c:	20000235 	.word	0x20000235
 8000660:	20000236 	.word	0x20000236
 8000664:	20000238 	.word	0x20000238
 8000668:	2000023c 	.word	0x2000023c
 800066c:	20000240 	.word	0x20000240
 8000670:	20000242 	.word	0x20000242
 8000674:	40020800 	.word	0x40020800
 8000678:	20000114 	.word	0x20000114
 800067c:	200001a4 	.word	0x200001a4

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 f99f 	bl	80059d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xb4>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xb4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <SystemClock_Config+0xb8>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <SystemClock_Config+0xb8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fc1c 	bl	8001f2c <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006fa:	f000 fd0b 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fe7f 	bl	800241c <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000724:	f000 fcf6 	bl	8001114 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000728:	f001 ff5e 	bl	80025e8 <HAL_RCC_EnableCSS>
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2006      	movs	r0, #6
 8000746:	f001 f8ee 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800074a:	2006      	movs	r0, #6
 800074c:	f001 f907 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2007      	movs	r0, #7
 8000756:	f001 f8e6 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800075a:	2007      	movs	r0, #7
 800075c:	f001 f8ff 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	2019      	movs	r0, #25
 8000766:	f001 f8de 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800076a:	2019      	movs	r0, #25
 800076c:	f001 f8f7 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2103      	movs	r1, #3
 8000774:	2025      	movs	r0, #37	; 0x25
 8000776:	f001 f8d6 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800077a:	2025      	movs	r0, #37	; 0x25
 800077c:	f001 f8ef 	bl	800195e <HAL_NVIC_EnableIRQ>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_TIM3_Init+0x90>)
 80007a2:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <MX_TIM3_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_TIM3_Init+0x90>)
 80007a8:	2219      	movs	r2, #25
 80007aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_TIM3_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_TIM3_Init+0x90>)
 80007b4:	2232      	movs	r2, #50	; 0x32
 80007b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_TIM3_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_TIM3_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <MX_TIM3_Init+0x90>)
 80007c6:	f002 f830 	bl	800282a <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80007d0:	f000 fca0 	bl	8001114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_TIM3_Init+0x90>)
 80007e2:	f002 fa18 	bl	8002c16 <HAL_TIM_ConfigClockSource>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80007ec:	f000 fc92 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_TIM3_Init+0x90>)
 80007fe:	f002 fc33 	bl	8003068 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000808:	f000 fc84 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000114 	.word	0x20000114
 8000818:	40000400 	.word	0x40000400

0800081c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_TIM10_Init+0x40>)
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <MX_TIM10_Init+0x44>)
 8000824:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2599;
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_TIM10_Init+0x40>)
 8000828:	f640 2227 	movw	r2, #2599	; 0xa27
 800082c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_TIM10_Init+0x40>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_TIM10_Init+0x40>)
 8000836:	f242 720f 	movw	r2, #9999	; 0x270f
 800083a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_TIM10_Init+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_TIM10_Init+0x40>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_TIM10_Init+0x40>)
 800084a:	f001 ffee 	bl	800282a <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000854:	f000 fc5e 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000015c 	.word	0x2000015c
 8000860:	40014400 	.word	0x40014400

08000864 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_UART4_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_UART4_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_UART4_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_UART4_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_UART4_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_UART4_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_UART4_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_UART4_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_UART4_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_UART4_Init+0x4c>)
 800089c:	f002 fc74 	bl	8003188 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 fc35 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200001a4 	.word	0x200001a4
 80008b4:	40004c00 	.word	0x40004c00

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART1_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART1_UART_Init+0x4c>)
 80008f0:	f002 fc4a 	bl	8003188 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 fc0b 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001e8 	.word	0x200001e8
 8000908:	40011000 	.word	0x40011000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b80      	ldr	r3, [pc, #512]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a7f      	ldr	r2, [pc, #508]	; (8000b28 <MX_GPIO_Init+0x21c>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b7d      	ldr	r3, [pc, #500]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b79      	ldr	r3, [pc, #484]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a78      	ldr	r2, [pc, #480]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b76      	ldr	r3, [pc, #472]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b72      	ldr	r3, [pc, #456]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a71      	ldr	r2, [pc, #452]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b6f      	ldr	r3, [pc, #444]	; (8000b28 <MX_GPIO_Init+0x21c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b6b      	ldr	r3, [pc, #428]	; (8000b28 <MX_GPIO_Init+0x21c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a6a      	ldr	r2, [pc, #424]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b68      	ldr	r3, [pc, #416]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b64      	ldr	r3, [pc, #400]	; (8000b28 <MX_GPIO_Init+0x21c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a63      	ldr	r2, [pc, #396]	; (8000b28 <MX_GPIO_Init+0x21c>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b61      	ldr	r3, [pc, #388]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a5c      	ldr	r2, [pc, #368]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b5a      	ldr	r3, [pc, #360]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b56      	ldr	r3, [pc, #344]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a55      	ldr	r2, [pc, #340]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b53      	ldr	r3, [pc, #332]	; (8000b28 <MX_GPIO_Init+0x21c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RXEN_L_GPIO_Port, RXEN_L_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4850      	ldr	r0, [pc, #320]	; (8000b2c <MX_GPIO_Init+0x220>)
 80009ec:	f001 fa2a 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_MOD_H_GPIO_Port, UART_MOD_H_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	484e      	ldr	r0, [pc, #312]	; (8000b30 <MX_GPIO_Init+0x224>)
 80009f6:	f001 fa25 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TE_485_L_GPIO_Port, TE_485_L_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a00:	484c      	ldr	r0, [pc, #304]	; (8000b34 <MX_GPIO_Init+0x228>)
 8000a02:	f001 fa1f 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HDPLX_H_GPIO_Port, HDPLX_H_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0c:	484a      	ldr	r0, [pc, #296]	; (8000b38 <MX_GPIO_Init+0x22c>)
 8000a0e:	f001 fa19 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DXEN_H_GPIO_Port, DXEN_H_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a18:	4848      	ldr	r0, [pc, #288]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000a1a:	f001 fa13 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSC_En_GPIO_Port, OSC_En_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a24:	4843      	ldr	r0, [pc, #268]	; (8000b34 <MX_GPIO_Init+0x228>)
 8000a26:	f001 fa0d 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedOut_GPIO_Port, LedOut_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a30:	4843      	ldr	r0, [pc, #268]	; (8000b40 <MX_GPIO_Init+0x234>)
 8000a32:	f001 fa07 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RXEN_L_Pin */
  GPIO_InitStruct.Pin = RXEN_L_Pin;
 8000a36:	2308      	movs	r3, #8
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RXEN_L_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4837      	ldr	r0, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x220>)
 8000a4e:	f001 f85d 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_MOD_H_Pin */
  GPIO_InitStruct.Pin = UART_MOD_H_Pin;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART_MOD_H_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4831      	ldr	r0, [pc, #196]	; (8000b30 <MX_GPIO_Init+0x224>)
 8000a6a:	f001 f84f 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_485_L_Pin */
  GPIO_InitStruct.Pin = TE_485_L_Pin;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TE_485_L_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	482b      	ldr	r0, [pc, #172]	; (8000b34 <MX_GPIO_Init+0x228>)
 8000a88:	f001 f840 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : HDPLX_H_Pin */
  GPIO_InitStruct.Pin = HDPLX_H_Pin;
 8000a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HDPLX_H_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4824      	ldr	r0, [pc, #144]	; (8000b38 <MX_GPIO_Init+0x22c>)
 8000aa6:	f001 f831 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : DXEN_H_Pin */
  GPIO_InitStruct.Pin = DXEN_H_Pin;
 8000aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DXEN_H_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481e      	ldr	r0, [pc, #120]	; (8000b3c <MX_GPIO_Init+0x230>)
 8000ac4:	f001 f822 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_En_Pin */
  GPIO_InitStruct.Pin = OSC_En_Pin;
 8000ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OSC_En_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_GPIO_Init+0x228>)
 8000ae2:	f001 f813 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Gate_Out_Pin Gate_In_Pin */
  GPIO_InitStruct.Pin = Gate_Out_Pin|Gate_In_Pin;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af0:	2302      	movs	r3, #2
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0x220>)
 8000afc:	f001 f806 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LedOut_Pin */
  GPIO_InitStruct.Pin = LedOut_Pin;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LedOut_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_GPIO_Init+0x234>)
 8000b1a:	f000 fff7 	bl	8001b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4e:	b672      	cpsid	i
}
 8000b50:	bf00      	nop
    __disable_irq();
    if (GPIO_Pin == Gate_In_Pin)
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d134      	bne.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x7e>
    {
       if (READ_BIT(Modbus_Ctrl_Reg, MEASURE_FLAG) && f_start == false)
 8000b58:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d05a      	beq.n	8000c1a <HAL_GPIO_EXTI_Callback+0xd6>
 8000b64:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d155      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0xd6>
       {
           HAL_NVIC_DisableIRQ(Gate_In_EXTI_IRQn); //Disable EXTI0 interrupt to exclude debounce
 8000b6e:	2006      	movs	r0, #6
 8000b70:	f000 ff03 	bl	800197a <HAL_NVIC_DisableIRQ>

           tim10_elapsed_cnt = 0;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
           tim10_reminder = 0;
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]

           f_start = true;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
           f_error =  false;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]

           //Clear all pending EXTI1 interrupts and enable interrupt
           while (HAL_NVIC_GetPendingIRQ(Gate_Out_EXTI_IRQn))
 8000b8c:	e005      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0x56>
           {
               __HAL_GPIO_EXTI_CLEAR_IT(Gate_Out_Pin);
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_GPIO_EXTI_Callback+0xf8>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	615a      	str	r2, [r3, #20]
               HAL_NVIC_ClearPendingIRQ(Gate_Out_EXTI_IRQn);
 8000b94:	2007      	movs	r0, #7
 8000b96:	f000 ff19 	bl	80019cc <HAL_NVIC_ClearPendingIRQ>
           while (HAL_NVIC_GetPendingIRQ(Gate_Out_EXTI_IRQn))
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 ff07 	bl	80019ae <HAL_NVIC_GetPendingIRQ>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f3      	bne.n	8000b8e <HAL_GPIO_EXTI_Callback+0x4a>
           }
           HAL_NVIC_EnableIRQ(Gate_Out_EXTI_IRQn);
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f000 fed9 	bl	800195e <HAL_NVIC_EnableIRQ>

           __HAL_TIM_SET_COUNTER(&htim10, 0); //Erase timer counter and start it
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
           //HAL_TIM_Base_Start_IT(&htim10);

           HAL_GPIO_WritePin(LedOut_GPIO_Port, LedOut_Pin, GPIO_PIN_SET); //RED LED turned on
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bba:	4822      	ldr	r0, [pc, #136]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x100>)
 8000bbc:	f001 f942 	bl	8001e44 <HAL_GPIO_WritePin>
 8000bc0:	e02b      	b.n	8000c1a <HAL_GPIO_EXTI_Callback+0xd6>
       }
    }
    else if (GPIO_Pin == Gate_Out_Pin)
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d128      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0xd6>
    {
        if (READ_BIT(Modbus_Ctrl_Reg, MEASURE_FLAG) && f_start == true)
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d022      	beq.n	8000c1a <HAL_GPIO_EXTI_Callback+0xd6>
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d11d      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0xd6>
        {
            HAL_NVIC_DisableIRQ(Gate_Out_EXTI_IRQn); //Disable EXTI1 interrupt to exclude debounce
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fecb 	bl	800197a <HAL_NVIC_DisableIRQ>

            HAL_TIM_Base_Stop_IT(&htim10);  //Stop timer counter and save the counter value
 8000be4:	4816      	ldr	r0, [pc, #88]	; (8000c40 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000be6:	f001 fedf 	bl	80029a8 <HAL_TIM_Base_Stop_IT>
            tim10_reminder = __HAL_TIM_GET_COUNTER(&htim10);
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf0:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000bf2:	6013      	str	r3, [r2, #0]

            CLEAR_BIT(Modbus_Ctrl_Reg, MEASURE_FLAG);
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f023 0301 	bic.w	r3, r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c00:	701a      	strb	r2, [r3, #0]
            f_start = false;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
            f_calc = true;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]

            HAL_GPIO_WritePin(LedOut_GPIO_Port, LedOut_Pin, GPIO_PIN_RESET); //RED LED turned off
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c16:	f001 f915 	bl	8001e44 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c1a:	b662      	cpsie	i
}
 8000c1c:	bf00      	nop
        }
    }
    __enable_irq();
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000242 	.word	0x20000242
 8000c2c:	20000236 	.word	0x20000236
 8000c30:	2000022c 	.word	0x2000022c
 8000c34:	20000230 	.word	0x20000230
 8000c38:	20000235 	.word	0x20000235
 8000c3c:	40013c00 	.word	0x40013c00
 8000c40:	2000015c 	.word	0x2000015c
 8000c44:	40021000 	.word	0x40021000
 8000c48:	20000234 	.word	0x20000234

08000c4c <HAL_UART_RxCpltCallback>:
/**
  * @brief UART RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback_modbus(huart);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f004 fae1 	bl	800521c <HAL_UART_RxCpltCallback_modbus>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_UART_TxCpltCallback>:
/**
  * @brief UART TX complete callback
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
    HAL_UART_TxCpltCallback_modbus(huart);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f004 fac2 	bl	80051f4 <HAL_UART_TxCpltCallback_modbus>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief Timer tim10 elapsed period callback
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PeriodElapsedCallback_Modbus(htim);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f004 fb17 	bl	80052b4 <HAL_TIM_PeriodElapsedCallback_Modbus>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
}
 8000c88:	bf00      	nop

    __disable_irq();
    if (htim->Instance == TIM10)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d12d      	bne.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
        if(f_start == true)
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d128      	bne.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x78>
        {
            //check for the false start case
            if (++tim10_elapsed_cnt == FALSE_START_TIMEOUT)
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d11c      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x6e>
            {
                HAL_TIM_Base_Stop_IT(&htim10);  //Don't need timer any more -  stop it
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cae:	f001 fe7b 	bl	80029a8 <HAL_TIM_Base_Stop_IT>
                HAL_NVIC_DisableIRQ(Gate_Out_EXTI_IRQn); //Disable EXTI1 interrupt - don't need it any more
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f000 fe61 	bl	800197a <HAL_NVIC_DisableIRQ>

                f_error =  true;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
                CLEAR_BIT(Modbus_Ctrl_Reg, MEASURE_FLAG);
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cca:	701a      	strb	r2, [r3, #0]
                f_start = false;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
                f_calc = false;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(LedOut_GPIO_Port, LedOut_Pin, GPIO_PIN_RESET);  //RED LED turned off
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ce0:	f001 f8b0 	bl	8001e44 <HAL_GPIO_WritePin>
 8000ce4:	e004      	b.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x78>
            }
            else
            {
                HAL_GPIO_TogglePin(LedOut_GPIO_Port, LedOut_Pin);
 8000ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cea:	480b      	ldr	r0, [pc, #44]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cec:	f001 f8c3 	bl	8001e76 <HAL_GPIO_TogglePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf0:	b662      	cpsie	i
}
 8000cf2:	bf00      	nop
            }
        }
    }
    __enable_irq();
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40014400 	.word	0x40014400
 8000d00:	20000236 	.word	0x20000236
 8000d04:	2000022c 	.word	0x2000022c
 8000d08:	2000015c 	.word	0x2000015c
 8000d0c:	20000235 	.word	0x20000235
 8000d10:	20000242 	.word	0x20000242
 8000d14:	20000234 	.word	0x20000234
 8000d18:	40021000 	.word	0x40021000

08000d1c <Init_SpeedMeasure>:
/**
  * @brief Initialize the speed measurement process
  * @retval None
  */
static void Init_SpeedMeasure()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
    __disable_irq();
    //Clear all pending EXTI0 interrupts and enable interrupt
    while (HAL_NVIC_GetPendingIRQ(Gate_In_EXTI_IRQn))
 8000d24:	e005      	b.n	8000d32 <Init_SpeedMeasure+0x16>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(Gate_In_Pin);
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <Init_SpeedMeasure+0x38>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	615a      	str	r2, [r3, #20]
        HAL_NVIC_ClearPendingIRQ(Gate_In_EXTI_IRQn);
 8000d2c:	2006      	movs	r0, #6
 8000d2e:	f000 fe4d 	bl	80019cc <HAL_NVIC_ClearPendingIRQ>
    while (HAL_NVIC_GetPendingIRQ(Gate_In_EXTI_IRQn))
 8000d32:	2006      	movs	r0, #6
 8000d34:	f000 fe3b 	bl	80019ae <HAL_NVIC_GetPendingIRQ>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f3      	bne.n	8000d26 <Init_SpeedMeasure+0xa>
    }
    HAL_NVIC_EnableIRQ(Gate_In_EXTI_IRQn);
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f000 fe0d 	bl	800195e <HAL_NVIC_EnableIRQ>

    HAL_TIM_Base_Start_IT(&htim10);
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <Init_SpeedMeasure+0x3c>)
 8000d46:	f001 fdbf 	bl	80028c8 <HAL_TIM_Base_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d4a:	b662      	cpsie	i
}
 8000d4c:	bf00      	nop
    __enable_irq();
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013c00 	.word	0x40013c00
 8000d58:	2000015c 	.word	0x2000015c

08000d5c <Calculate_Speed>:
/**
  * @brief Calculate the object speed (m/s) and transmit it through the UART interface
  * @retval None
  */
static void Calculate_Speed()
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0

    /*time_us =  ONE_TICK_US * (tim10_elapsed_cnt * TIM10_Period + tim10_reminder) ;

    object_speed = ((REEL_LENGTH_CM * 1000000) / time_us) / 100; //speed in meters per second*/

    if (tim10_elapsed_cnt == 0 && tim10_reminder == 0) //case if two sensors were triggered simultaneously
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <Calculate_Speed+0x68>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d108      	bne.n	8000d7c <Calculate_Speed+0x20>
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <Calculate_Speed+0x6c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <Calculate_Speed+0x20>
    {
        object_speed = FALSE_START_SPEED_VAL - 1; //to identify this situation from others
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <Calculate_Speed+0x70>)
 8000d74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d78:	801a      	strh	r2, [r3, #0]
 8000d7a:	e01d      	b.n	8000db8 <Calculate_Speed+0x5c>
    }
    else
    {
        time_us = tim10_elapsed_cnt * TIM10_Period + tim10_reminder;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <Calculate_Speed+0x68>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d84:	fb03 f202 	mul.w	r2, r3, r2
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <Calculate_Speed+0x6c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	607b      	str	r3, [r7, #4]

        object_speed = (uint16_t)( ( MAX_CM_PER_SEC / time_us ) / 10); //speed in tenth of centimeters per second
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <Calculate_Speed+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <Calculate_Speed+0x70>)
 8000d9c:	801a      	strh	r2, [r3, #0]

        object_time_us = time_us * ONE_TICK_US; //time in us
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2264      	movs	r2, #100	; 0x64
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <Calculate_Speed+0x78>)
 8000da8:	6013      	str	r3, [r2, #0]

        ++measure_cnt;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <Calculate_Speed+0x7c>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <Calculate_Speed+0x7c>)
 8000db4:	801a      	strh	r2, [r3, #0]
    }
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	2000022c 	.word	0x2000022c
 8000dc8:	20000230 	.word	0x20000230
 8000dcc:	20000238 	.word	0x20000238
 8000dd0:	000186a0 	.word	0x000186a0
 8000dd4:	2000023c 	.word	0x2000023c
 8000dd8:	20000240 	.word	0x20000240

08000ddc <eMBRegInputCB>:
/**
  * @brief
  * @retval eMBErrorCode
  */
eMBErrorCode eMBRegInputCB(uint8_t *pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
 8000de8:	4613      	mov	r3, r2
 8000dea:	803b      	strh	r3, [r7, #0]
    eMBErrorCode eStatus = MB_ENOERR;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
    uint32_t iRegIndex;

    if ((usAddress >= REG_INPUT_START) &&
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d028      	beq.n	8000e48 <eMBRegInputCB+0x6c>
        (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8000df6:	887a      	ldrh	r2, [r7, #2]
 8000df8:	883b      	ldrh	r3, [r7, #0]
 8000dfa:	4413      	add	r3, r2
    if ((usAddress >= REG_INPUT_START) &&
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	dc23      	bgt.n	8000e48 <eMBRegInputCB+0x6c>
    {
        iRegIndex = (uint32_t)(usAddress - REG_INPUT_START);
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
        while(usNRegs > 0)
 8000e06:	e01b      	b.n	8000e40 <eMBRegInputCB+0x64>
        {
            *pucRegBuffer++ = *Modbus_Data_Array[iRegIndex] >> 8;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <eMBRegInputCB+0x80>)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b299      	uxth	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	b2ca      	uxtb	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = *Modbus_Data_Array[iRegIndex] & 0xFF;
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <eMBRegInputCB+0x80>)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	8819      	ldrh	r1, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	b2ca      	uxtb	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 8000e3a:	883b      	ldrh	r3, [r7, #0]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	803b      	strh	r3, [r7, #0]
        while(usNRegs > 0)
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1e0      	bne.n	8000e08 <eMBRegInputCB+0x2c>
    if ((usAddress >= REG_INPUT_START) &&
 8000e46:	e001      	b.n	8000e4c <eMBRegInputCB+0x70>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000000 	.word	0x20000000

08000e60 <eMBRegHoldingCB>:
/**
  * @brief
  * @retval eMBErrorCode
  */
eMBErrorCode eMBRegHoldingCB(uint8_t * pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	817b      	strh	r3, [r7, #10]
 8000e72:	460b      	mov	r3, r1
 8000e74:	813b      	strh	r3, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode eStatus = MB_ENOERR;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]
    uint32_t iRegIndex;

    if ( (usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS) )
 8000e7e:	897b      	ldrh	r3, [r7, #10]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d055      	beq.n	8000f30 <eMBRegHoldingCB+0xd0>
 8000e84:	897a      	ldrh	r2, [r7, #10]
 8000e86:	893b      	ldrh	r3, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	2b05      	cmp	r3, #5
 8000e8c:	dc50      	bgt.n	8000f30 <eMBRegHoldingCB+0xd0>
    {
        iRegIndex = (uint32_t)(usAddress - REG_HOLDING_START);
 8000e8e:	897b      	ldrh	r3, [r7, #10]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
        switch (eMode)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d01e      	beq.n	8000ed8 <eMBRegHoldingCB+0x78>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d043      	beq.n	8000f26 <eMBRegHoldingCB+0xc6>
 8000e9e:	e049      	b.n	8000f34 <eMBRegHoldingCB+0xd4>
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
                while (usNRegs > 0)
                {
                    *pucRegBuffer++ = *Modbus_Data_Array[iRegIndex] >> 8;
 8000ea0:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <eMBRegHoldingCB+0xe4>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b299      	uxth	r1, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	60fa      	str	r2, [r7, #12]
 8000eb4:	b2ca      	uxtb	r2, r1
 8000eb6:	701a      	strb	r2, [r3, #0]
                    *pucRegBuffer++ = *Modbus_Data_Array[iRegIndex] & 0xFF;
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <eMBRegHoldingCB+0xe4>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	8819      	ldrh	r1, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	60fa      	str	r2, [r7, #12]
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
                    iRegIndex++;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
                    usNRegs--;
 8000ed2:	893b      	ldrh	r3, [r7, #8]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	813b      	strh	r3, [r7, #8]
                while (usNRegs > 0)
 8000ed8:	893b      	ldrh	r3, [r7, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1e0      	bne.n	8000ea0 <eMBRegHoldingCB+0x40>
                }
                break;
 8000ede:	e026      	b.n	8000f2e <eMBRegHoldingCB+0xce>
                /* Update current register values with new values from the
                 * protocol stack. */
            case MB_REG_WRITE:
                while (usNRegs > 0)
                {
                    *Modbus_Data_Array[iRegIndex] = *pucRegBuffer++ << 8;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60fa      	str	r2, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4916      	ldr	r1, [pc, #88]	; (8000f44 <eMBRegHoldingCB+0xe4>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef2:	0212      	lsls	r2, r2, #8
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	801a      	strh	r2, [r3, #0]
                    *Modbus_Data_Array[iRegIndex] |= *pucRegBuffer++;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60fa      	str	r2, [r7, #12]
 8000efe:	7818      	ldrb	r0, [r3, #0]
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <eMBRegHoldingCB+0xe4>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	8819      	ldrh	r1, [r3, #0]
 8000f0a:	b282      	uxth	r2, r0
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <eMBRegHoldingCB+0xe4>)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	b292      	uxth	r2, r2
 8000f18:	801a      	strh	r2, [r3, #0]
                    iRegIndex++;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
                    usNRegs--;
 8000f20:	893b      	ldrh	r3, [r7, #8]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	813b      	strh	r3, [r7, #8]
                while (usNRegs > 0)
 8000f26:	893b      	ldrh	r3, [r7, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1d9      	bne.n	8000ee0 <eMBRegHoldingCB+0x80>
        switch (eMode)
 8000f2c:	e002      	b.n	8000f34 <eMBRegHoldingCB+0xd4>
 8000f2e:	e001      	b.n	8000f34 <eMBRegHoldingCB+0xd4>
                }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000f30:	2301      	movs	r3, #1
 8000f32:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000000 	.word	0x20000000

08000f48 <eMBRegCoilsCB>:
/**
  * @brief
  * @retval eMBErrorCode
  */
eMBErrorCode eMBRegCoilsCB(uint8_t * pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	817b      	strh	r3, [r7, #10]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	813b      	strh	r3, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71fb      	strb	r3, [r7, #7]
     eMBErrorCode eStatus = MB_ENOERR;
 8000f62:	2300      	movs	r3, #0
 8000f64:	77fb      	strb	r3, [r7, #31]
     uint32_t iBitIndex;

     if ( (usAddress >= REG_COILS_START) && (usAddress + usNCoils <= REG_COILS_START + REG_COILS_NREGS) )
 8000f66:	897b      	ldrh	r3, [r7, #10]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d04f      	beq.n	800100c <eMBRegCoilsCB+0xc4>
 8000f6c:	897a      	ldrh	r2, [r7, #10]
 8000f6e:	893b      	ldrh	r3, [r7, #8]
 8000f70:	4413      	add	r3, r2
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	dc4a      	bgt.n	800100c <eMBRegCoilsCB+0xc4>
     {
         iBitIndex = (uint32_t)(usAddress - REG_COILS_START);
 8000f76:	897b      	ldrh	r3, [r7, #10]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]

         switch (eMode)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d01d      	beq.n	8000fbe <eMBRegCoilsCB+0x76>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d03d      	beq.n	8001002 <eMBRegCoilsCB+0xba>
 8000f86:	e043      	b.n	8001010 <eMBRegCoilsCB+0xc8>
         {
             case MB_REG_READ:
             {
                 while (usNCoils > 0)
                 {
                     UCHAR ucResult = xMBUtilGetBits(&Modbus_Ctrl_Reg, iBitIndex, 1);
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4822      	ldr	r0, [pc, #136]	; (800101c <eMBRegCoilsCB+0xd4>)
 8000f92:	f003 fe6d 	bl	8004c70 <xMBUtilGetBits>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75bb      	strb	r3, [r7, #22]
                     xMBUtilSetBits(pucRegBuffer, iBitIndex - (usAddress - REG_COILS_START), 1, ucResult);
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	897b      	ldrh	r3, [r7, #10]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	7dbb      	ldrb	r3, [r7, #22]
 8000faa:	2201      	movs	r2, #1
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f003 fdf3 	bl	8004b98 <xMBUtilSetBits>
                     iBitIndex++;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
                     usNCoils--;
 8000fb8:	893b      	ldrh	r3, [r7, #8]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	813b      	strh	r3, [r7, #8]
                 while (usNCoils > 0)
 8000fbe:	893b      	ldrh	r3, [r7, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e1      	bne.n	8000f88 <eMBRegCoilsCB+0x40>
                 }
                 break;
 8000fc4:	e021      	b.n	800100a <eMBRegCoilsCB+0xc2>
             }
             case MB_REG_WRITE:
             {
                 while (usNCoils > 0)
                 {
                     UCHAR ucResult = xMBUtilGetBits(pucRegBuffer, iBitIndex - (usAddress - REG_COILS_START), 1);
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	897b      	ldrh	r3, [r7, #10]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f003 fe49 	bl	8004c70 <xMBUtilGetBits>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	75fb      	strb	r3, [r7, #23]
                     xMBUtilSetBits(&Modbus_Ctrl_Reg, iBitIndex, 1, ucResult );
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <eMBRegCoilsCB+0xd4>)
 8000fec:	f003 fdd4 	bl	8004b98 <xMBUtilSetBits>

                     CtrlRegister_Handler(iBitIndex); //Control register Bits handler
 8000ff0:	69b8      	ldr	r0, [r7, #24]
 8000ff2:	f000 f825 	bl	8001040 <CtrlRegister_Handler>

                     iBitIndex++;
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
                     usNCoils--;
 8000ffc:	893b      	ldrh	r3, [r7, #8]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	813b      	strh	r3, [r7, #8]
                 while (usNCoils > 0)
 8001002:	893b      	ldrh	r3, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1de      	bne.n	8000fc6 <eMBRegCoilsCB+0x7e>
                 }
                 break;
 8001008:	bf00      	nop
         switch (eMode)
 800100a:	e001      	b.n	8001010 <eMBRegCoilsCB+0xc8>
             }
         }
     }
     else
     {
         eStatus = MB_ENOREG;
 800100c:	2301      	movs	r3, #1
 800100e:	77fb      	strb	r3, [r7, #31]
     }

     return eStatus;
 8001010:	7ffb      	ldrb	r3, [r7, #31]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000242 	.word	0x20000242

08001020 <eMBRegDiscreteCB>:
/**
  * @brief
  * @retval eMBErrorCode
  */
eMBErrorCode eMBRegDiscreteCB(uint8_t * pucRegBuffer, uint16_t usAddress, uint16_t usNDiscrete)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	803b      	strh	r3, [r7, #0]

    return MB_ENOERR;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <CtrlRegister_Handler>:
/**
  * @brief Control register's bits handler
  * @retval None
  */
static void CtrlRegister_Handler(uint32_t bit)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    switch(bit)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <CtrlRegister_Handler+0x16>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d009      	beq.n	8001068 <CtrlRegister_Handler+0x28>
            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
            break;
        }

        default:
            break;
 8001054:	e02d      	b.n	80010b2 <CtrlRegister_Handler+0x72>
            if (READ_BIT(Modbus_Ctrl_Reg, MEASURE_FLAG))
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <CtrlRegister_Handler+0x7c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d026      	beq.n	80010b0 <CtrlRegister_Handler+0x70>
                Init_SpeedMeasure();
 8001062:	f7ff fe5b 	bl	8000d1c <Init_SpeedMeasure>
            break;
 8001066:	e023      	b.n	80010b0 <CtrlRegister_Handler+0x70>
            GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
            if (READ_BIT(Modbus_Ctrl_Reg, INT_EDGE))
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <CtrlRegister_Handler+0x7c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <CtrlRegister_Handler+0x54>
                GPIO_InitStruct.Pin = Gate_Out_Pin|Gate_In_Pin;
 8001084:	2303      	movs	r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
                GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108c:	613b      	str	r3, [r7, #16]
                GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e006      	b.n	80010a2 <CtrlRegister_Handler+0x62>
                GPIO_InitStruct.Pin = Gate_Out_Pin|Gate_In_Pin;
 8001094:	2303      	movs	r3, #3
 8001096:	60fb      	str	r3, [r7, #12]
                GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001098:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800109c:	613b      	str	r3, [r7, #16]
                GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <CtrlRegister_Handler+0x80>)
 80010aa:	f000 fd2f 	bl	8001b0c <HAL_GPIO_Init>
            break;
 80010ae:	e000      	b.n	80010b2 <CtrlRegister_Handler+0x72>
            break;
 80010b0:	bf00      	nop
    }
}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000242 	.word	0x20000242
 80010c0:	40020400 	.word	0x40020400

080010c4 <LTC2870_RX485_En_Rx>:
/**
  * @brief Enable LTC2870 RX mode
  * @retval
  */
void LTC2870_RX485_En_Rx()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RXEN_L_GPIO_Port, RXEN_L_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2108      	movs	r1, #8
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <LTC2870_RX485_En_Rx+0x20>)
 80010ce:	f000 feb9 	bl	8001e44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DXEN_H_GPIO_Port, DXEN_H_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <LTC2870_RX485_En_Rx+0x24>)
 80010da:	f000 feb3 	bl	8001e44 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40021800 	.word	0x40021800

080010ec <LTC2870_RX485_En_Tx>:
/**
  * @brief Enable LTC2870 TX mode
  * @retval
  */
void LTC2870_RX485_En_Tx()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RXEN_L_GPIO_Port, RXEN_L_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <LTC2870_RX485_En_Tx+0x20>)
 80010f6:	f000 fea5 	bl	8001e44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DXEN_H_GPIO_Port, DXEN_H_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <LTC2870_RX485_En_Tx+0x24>)
 8001102:	f000 fe9f 	bl	8001e44 <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400
 8001110:	40021800 	.word	0x40021800

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_MspInit+0x4c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_TIM_Base_MspInit+0x70>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d116      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_TIM_Base_MspInit+0x74>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <HAL_TIM_Base_MspInit+0x74>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_TIM_Base_MspInit+0x74>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2102      	movs	r1, #2
 80011a2:	201d      	movs	r0, #29
 80011a4:	f000 fbbf 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011a8:	201d      	movs	r0, #29
 80011aa:	f000 fbd8 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011ae:	e012      	b.n	80011d6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <HAL_TIM_Base_MspInit+0x78>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10d      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_TIM_Base_MspInit+0x74>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_TIM_Base_MspInit+0x74>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_TIM_Base_MspInit+0x74>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40014400 	.word	0x40014400

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a37      	ldr	r2, [pc, #220]	; (80012e8 <HAL_UART_MspInit+0xfc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d135      	bne.n	800127a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_UART_MspInit+0x100>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a35      	ldr	r2, [pc, #212]	; (80012ec <HAL_UART_MspInit+0x100>)
 8001218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_UART_MspInit+0x100>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_UART_MspInit+0x100>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <HAL_UART_MspInit+0x100>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_UART_MspInit+0x100>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001258:	2308      	movs	r3, #8
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4823      	ldr	r0, [pc, #140]	; (80012f0 <HAL_UART_MspInit+0x104>)
 8001264:	f000 fc52 	bl	8001b0c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 3, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2103      	movs	r1, #3
 800126c:	2034      	movs	r0, #52	; 0x34
 800126e:	f000 fb5a 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001272:	2034      	movs	r0, #52	; 0x34
 8001274:	f000 fb73 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001278:	e031      	b.n	80012de <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_UART_MspInit+0x108>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d12c      	bne.n	80012de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_UART_MspInit+0x100>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_UART_MspInit+0x100>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6453      	str	r3, [r2, #68]	; 0x44
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0x100>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_UART_MspInit+0x100>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_UART_MspInit+0x100>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_UART_MspInit+0x100>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ce:	2307      	movs	r3, #7
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <HAL_UART_MspInit+0x10c>)
 80012da:	f000 fc17 	bl	8001b0c <HAL_GPIO_Init>
}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004c00 	.word	0x40004c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40020000 	.word	0x40020000

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001300:	f001 fa78 	bl	80027f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x8>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f98c 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Gate_In_Pin);
 8001358:	2001      	movs	r0, #1
 800135a:	f000 fdcf 	bl	8001efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}

08001362 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Gate_Out_Pin);
 8001366:	2002      	movs	r0, #2
 8001368:	f000 fdc8 	bl	8001efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001376:	f001 fb46 	bl	8002a06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000015c 	.word	0x2000015c

08001384 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM3_IRQHandler+0x10>)
 800138a:	f001 fb3c 	bl	8002a06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000114 	.word	0x20000114

08001398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART1_IRQHandler+0x10>)
 800139e:	f002 f8db 	bl	8003558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001e8 	.word	0x200001e8

080013ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <UART4_IRQHandler+0x10>)
 80013b2:	f002 f8d1 	bl	8003558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001a4 	.word	0x200001a4

080013c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_kill>:

int _kill(int pid, int sig)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013da:	f004 fb49 	bl	8005a70 <__errno>
 80013de:	4603      	mov	r3, r0
 80013e0:	2216      	movs	r2, #22
 80013e2:	601a      	str	r2, [r3, #0]
  return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_exit>:

void _exit (int status)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffe7 	bl	80013d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001402:	e7fe      	b.n	8001402 <_exit+0x12>

08001404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
  }
  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	605a      	str	r2, [r3, #4]
  return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f004 faae 	bl	8005a70 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20020000 	.word	0x20020000
 8001540:	00000400 	.word	0x00000400
 8001544:	20000244 	.word	0x20000244
 8001548:	20000508 	.word	0x20000508

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f004 fa6d 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7fe ffe3 	bl	800056c <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80015b4:	08006af0 	.word	0x08006af0
  ldr r2, =_sbss
 80015b8:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80015bc:	20000508 	.word	0x20000508

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f98f 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fd92 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f9b5 	bl	8001996 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f96f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000010 	.word	0x20000010
 8001660:	20000018 	.word	0x20000018
 8001664:	20000014 	.word	0x20000014

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000018 	.word	0x20000018
 800168c:	20000248 	.word	0x20000248

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000248 	.word	0x20000248

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db12      	blt.n	8001780 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	490a      	ldr	r1, [pc, #40]	; (800178c <__NVIC_DisableIRQ+0x44>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	3320      	adds	r3, #32
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
}
 8001778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800177a:	f3bf 8f6f 	isb	sy
}
 800177e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0e      	blt.n	80017c0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <__NVIC_GetPendingIRQ+0x40>)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	3340      	adds	r3, #64	; 0x40
 80017ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	e000      	b.n	80017c2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80017c0:	2300      	movs	r3, #0
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0c      	blt.n	8001800 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_ClearPendingIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	3360      	adds	r3, #96	; 0x60
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fec5 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff feda 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fecd 	bl	800170c <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fedd 	bl	8001748 <__NVIC_DisableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff94 	bl	80018cc <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fee7 	bl	8001790 <__NVIC_GetPendingIRQ>
 80019c2:	4603      	mov	r3, r0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fefa 	bl	80017d4 <__NVIC_ClearPendingIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f6:	f7ff fe4b 	bl	8001690 <HAL_GetTick>
 80019fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d008      	beq.n	8001a1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e052      	b.n	8001ac0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0216 	bic.w	r2, r2, #22
 8001a28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <HAL_DMA_Abort+0x62>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0208 	bic.w	r2, r2, #8
 8001a58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6a:	e013      	b.n	8001a94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6c:	f7ff fe10 	bl	8001690 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d90c      	bls.n	8001a94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e015      	b.n	8001ac0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1e4      	bne.n	8001a6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	223f      	movs	r2, #63	; 0x3f
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d004      	beq.n	8001ae6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00c      	b.n	8001b00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2205      	movs	r2, #5
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e16b      	b.n	8001e00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 815a 	bne.w	8001dfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d005      	beq.n	8001b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d130      	bne.n	8001bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0201 	and.w	r2, r3, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d017      	beq.n	8001bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d123      	bne.n	8001c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	69b9      	ldr	r1, [r7, #24]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80b4 	beq.w	8001dfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	4a5b      	ldr	r2, [pc, #364]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x314>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a51      	ldr	r2, [pc, #324]	; (8001e24 <HAL_GPIO_Init+0x318>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x222>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_GPIO_Init+0x31c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x21e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x216>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x212>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4c      	ldr	r2, [pc, #304]	; (8001e38 <HAL_GPIO_Init+0x32c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x20e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <HAL_GPIO_Init+0x330>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x20a>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00e      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d16:	2308      	movs	r3, #8
 8001d18:	e00c      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d76:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f ae90 	bls.w	8001b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40021c00 	.word	0x40021c00
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	619a      	str	r2, [r3, #24]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8001ebc:	887a      	ldrh	r2, [r7, #2]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fe12 	bl	8000b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e267      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d075      	beq.n	8002036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d00c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d112      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b7e      	ldr	r3, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05b      	beq.n	8002034 <HAL_RCC_OscConfig+0x108>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d157      	bne.n	8002034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e242      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x74>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b70      	ldr	r3, [pc, #448]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6f      	ldr	r2, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6c      	ldr	r2, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fc4:	4b69      	ldr	r3, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a68      	ldr	r2, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fb54 	bl	8001690 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fb50 	bl	8001690 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e207      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0xc0>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fb40 	bl	8001690 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fb3c 	bl	8001690 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1f3      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0xe8>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002056:	2b08      	cmp	r3, #8
 8002058:	d11c      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_RCC_OscConfig+0x240>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d001      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1c7      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_RCC_OscConfig+0x240>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	e03a      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x244>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff faf5 	bl	8001690 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020aa:	f7ff faf1 	bl	8001690 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1a8      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4925      	ldr	r1, [pc, #148]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_OscConfig+0x244>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fad4 	bl	8001690 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ec:	f7ff fad0 	bl	8001690 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e187      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d036      	beq.n	8002184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_RCC_OscConfig+0x248>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff fab4 	bl	8001690 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fab0 	bl	8001690 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e167      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x200>
 800214a:	e01b      	b.n	8002184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_OscConfig+0x248>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fa9d 	bl	8001690 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00e      	b.n	8002178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fa99 	bl	8001690 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d907      	bls.n	8002178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e150      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800216c:	40023800 	.word	0x40023800
 8002170:	42470000 	.word	0x42470000
 8002174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ea      	bne.n	800215a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8097 	beq.w	80022c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b7d      	ldr	r3, [pc, #500]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a7c      	ldr	r2, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b7a      	ldr	r3, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a73      	ldr	r2, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7ff fa59 	bl	8001690 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7ff fa55 	bl	8001690 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e10c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x2ea>
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x30c>
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a5e      	ldr	r2, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a5b      	ldr	r2, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	; 0x70
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a54      	ldr	r2, [pc, #336]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fa1a 	bl	8001690 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fa16 	bl	8001690 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0cb      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ee      	beq.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff fa04 	bl	8001690 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff fa00 	bl	8001690 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0b5      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ee      	bne.n	800228c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a1 	beq.w	800240c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ca:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d05c      	beq.n	8002390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d141      	bne.n	8002362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f9d4 	bl	8001690 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff f9d0 	bl	8001690 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e087      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff f9a9 	bl	8001690 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff f9a5 	bl	8001690 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e05c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x416>
 8002360:	e054      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff f992 	bl	8001690 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff f98e 	bl	8001690 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e045      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e038      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d028      	beq.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d121      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cc      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90c      	bls.n	8002458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d044      	beq.n	800253c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e067      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4934      	ldr	r1, [pc, #208]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7ff f8c0 	bl	8001690 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff f8bc 	bl	8001690 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d20c      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f82d 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f820 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	080067f8 	.word	0x080067f8
 80025e0:	20000010 	.word	0x20000010
 80025e4:	20000014 	.word	0x20000014

080025e8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_EnableCSS+0x14>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	4247004c 	.word	0x4247004c

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002604:	b090      	sub	sp, #64	; 0x40
 8002606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
 800260c:	2300      	movs	r3, #0
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002610:	2300      	movs	r3, #0
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d00d      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x40>
 8002624:	2b08      	cmp	r3, #8
 8002626:	f200 80a1 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x16c>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 800262e:	2b04      	cmp	r3, #4
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x3a>
 8002632:	e09b      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_GetSysClockFreq+0x184>)
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002638:	e09b      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263a:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_GetSysClockFreq+0x188>)
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800263e:	e098      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264a:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d028      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	2200      	movs	r2, #0
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	627a      	str	r2, [r7, #36]	; 0x24
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002668:	2100      	movs	r1, #0
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_GetSysClockFreq+0x188>)
 800266c:	fb03 f201 	mul.w	r2, r3, r1
 8002670:	2300      	movs	r3, #0
 8002672:	fb00 f303 	mul.w	r3, r0, r3
 8002676:	4413      	add	r3, r2
 8002678:	4a43      	ldr	r2, [pc, #268]	; (8002788 <HAL_RCC_GetSysClockFreq+0x188>)
 800267a:	fba0 1202 	umull	r1, r2, r0, r2
 800267e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002680:	460a      	mov	r2, r1
 8002682:	62ba      	str	r2, [r7, #40]	; 0x28
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	4413      	add	r3, r2
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	2200      	movs	r2, #0
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	61fa      	str	r2, [r7, #28]
 8002692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800269a:	f7fd fde9 	bl	8000270 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4613      	mov	r3, r2
 80026a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a6:	e053      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	2200      	movs	r2, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	617a      	str	r2, [r7, #20]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026ba:	f04f 0b00 	mov.w	fp, #0
 80026be:	4652      	mov	r2, sl
 80026c0:	465b      	mov	r3, fp
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	0159      	lsls	r1, r3, #5
 80026cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d0:	0150      	lsls	r0, r2, #5
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	ebb2 080a 	subs.w	r8, r2, sl
 80026da:	eb63 090b 	sbc.w	r9, r3, fp
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026f2:	ebb2 0408 	subs.w	r4, r2, r8
 80026f6:	eb63 0509 	sbc.w	r5, r3, r9
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	00eb      	lsls	r3, r5, #3
 8002704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002708:	00e2      	lsls	r2, r4, #3
 800270a:	4614      	mov	r4, r2
 800270c:	461d      	mov	r5, r3
 800270e:	eb14 030a 	adds.w	r3, r4, sl
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	eb45 030b 	adc.w	r3, r5, fp
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	2200      	movs	r2, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002744:	f7fd fd94 	bl	8000270 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetSysClockFreq+0x184>)
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002774:	4618      	mov	r0, r3
 8002776:	3740      	adds	r7, #64	; 0x40
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400
 8002788:	018cba80 	.word	0x018cba80

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000010 	.word	0x20000010

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a9b      	lsrs	r3, r3, #10
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08006808 	.word	0x08006808

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffdc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0b5b      	lsrs	r3, r3, #13
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08006808 	.word	0x08006808

080027f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_NMI_IRQHandler+0x20>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d104      	bne.n	800280e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002804:	f000 f80a 	bl	800281c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_NMI_IRQHandler+0x24>)
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	701a      	strb	r2, [r3, #0]
  }
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	4002380e 	.word	0x4002380e

0800281c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e041      	b.n	80028c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fe fc8d 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f000 fac3 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04e      	b.n	800297e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_TIM_Base_Start_IT+0xc4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d01d      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_TIM_Base_Start_IT+0xc8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_TIM_Base_Start_IT+0xcc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_TIM_Base_Start_IT+0xd0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_TIM_Base_Start_IT+0xd4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x80>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d010      	beq.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	e007      	b.n	800297c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40010400 	.word	0x40010400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40001800 	.word	0x40001800

080029a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10f      	bne.n	80029f0 <HAL_TIM_Base_Stop_IT+0x48>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	f240 4344 	movw	r3, #1092	; 0x444
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_TIM_Base_Stop_IT+0x48>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d122      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d11b      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0202 	mvn.w	r2, #2
 8002a32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9b5 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002a4e:	e005      	b.n	8002a5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f9a7 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9b8 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d122      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0204 	mvn.w	r2, #4
 8002a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f98b 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002aa2:	e005      	b.n	8002ab0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f97d 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f98e 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d122      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11b      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0208 	mvn.w	r2, #8
 8002ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f961 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002af6:	e005      	b.n	8002b04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f953 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f964 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d122      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d11b      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0210 	mvn.w	r2, #16
 8002b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2208      	movs	r2, #8
 8002b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f937 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002b4a:	e005      	b.n	8002b58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f929 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f93a 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10e      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0201 	mvn.w	r2, #1
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe f877 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d10e      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fadf 	bl	8003174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d10e      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8ff 	bl	8002de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d10e      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0220 	mvn.w	r2, #32
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 faa9 	bl	8003160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_ConfigClockSource+0x1c>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0b4      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x186>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6a:	d03e      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0xd4>
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	f200 8087 	bhi.w	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	f000 8086 	beq.w	8002d88 <HAL_TIM_ConfigClockSource+0x172>
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d87f      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002c82:	2b70      	cmp	r3, #112	; 0x70
 8002c84:	d01a      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0xa6>
 8002c86:	2b70      	cmp	r3, #112	; 0x70
 8002c88:	d87b      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8a:	2b60      	cmp	r3, #96	; 0x60
 8002c8c:	d050      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0x11a>
 8002c8e:	2b60      	cmp	r3, #96	; 0x60
 8002c90:	d877      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002c92:	2b50      	cmp	r3, #80	; 0x50
 8002c94:	d03c      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xfa>
 8002c96:	2b50      	cmp	r3, #80	; 0x50
 8002c98:	d873      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d058      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0x13a>
 8002c9e:	2b40      	cmp	r3, #64	; 0x40
 8002ca0:	d86f      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d064      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca6:	2b30      	cmp	r3, #48	; 0x30
 8002ca8:	d86b      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d060      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x15a>
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d867      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d05c      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d05a      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x15a>
 8002cba:	e062      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f000 f9ac 	bl	8003028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
      break;
 8002ce8:	e04f      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f000 f995 	bl	8003028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e03c      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f000 f909 	bl	8002f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2150      	movs	r1, #80	; 0x50
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f962 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002d2e:	e02c      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f000 f928 	bl	8002f92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2160      	movs	r1, #96	; 0x60
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f952 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002d4e:	e01c      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f000 f8e9 	bl	8002f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f942 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e00c      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 f939 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002d80:	e003      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a40      	ldr	r2, [pc, #256]	; (8002f08 <TIM_Base_SetConfig+0x114>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d00f      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <TIM_Base_SetConfig+0x118>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3c      	ldr	r2, [pc, #240]	; (8002f10 <TIM_Base_SetConfig+0x11c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <TIM_Base_SetConfig+0x120>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <TIM_Base_SetConfig+0x124>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <TIM_Base_SetConfig+0x114>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02b      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d027      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <TIM_Base_SetConfig+0x118>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d023      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <TIM_Base_SetConfig+0x11c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <TIM_Base_SetConfig+0x120>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01b      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <TIM_Base_SetConfig+0x124>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d017      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <TIM_Base_SetConfig+0x128>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a27      	ldr	r2, [pc, #156]	; (8002f20 <TIM_Base_SetConfig+0x12c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <TIM_Base_SetConfig+0x130>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <TIM_Base_SetConfig+0x134>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <TIM_Base_SetConfig+0x138>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <TIM_Base_SetConfig+0x13c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <TIM_Base_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0xf8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <TIM_Base_SetConfig+0x124>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d103      	bne.n	8002ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	615a      	str	r2, [r3, #20]
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40010400 	.word	0x40010400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40014400 	.word	0x40014400
 8002f24:	40014800 	.word	0x40014800
 8002f28:	40001800 	.word	0x40001800
 8002f2c:	40001c00 	.word	0x40001c00
 8002f30:	40002000 	.word	0x40002000

08002f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0201 	bic.w	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 030a 	bic.w	r3, r3, #10
 8002f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0210 	bic.w	r2, r3, #16
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	031b      	lsls	r3, r3, #12
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	f043 0307 	orr.w	r3, r3, #7
 8003014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	021a      	lsls	r2, r3, #8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	431a      	orrs	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800307c:	2302      	movs	r3, #2
 800307e:	e05a      	b.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d01d      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1b      	ldr	r2, [pc, #108]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1a      	ldr	r2, [pc, #104]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4313      	orrs	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40010400 	.word	0x40010400
 8003158:	40014000 	.word	0x40014000
 800315c:	40001800 	.word	0x40001800

08003160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e03f      	b.n	800321a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe f81c 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fe81 	bl	8003ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	4613      	mov	r3, r2
 800322e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	d130      	bne.n	800329e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_Transmit_IT+0x26>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e029      	b.n	80032a0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_UART_Transmit_IT+0x38>
 8003256:	2302      	movs	r3, #2
 8003258:	e022      	b.n	80032a0 <HAL_UART_Transmit_IT+0x7e>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003298:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d11d      	bne.n	8003302 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_Receive_IT+0x26>
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e016      	b.n	8003304 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Receive_IT+0x38>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e00f      	b.n	8003304 <HAL_UART_Receive_IT+0x58>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fbe5 	bl	8003ac8 <UART_Start_Receive_IT>
 80032fe:	4603      	mov	r3, r0
 8003300:	e000      	b.n	8003304 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	; 0x38
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	61fb      	str	r3, [r7, #28]
   return(result);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003334:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e5      	bne.n	8003314 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d13c      	bne.n	80033d0 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3314      	adds	r3, #20
 800335c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	60bb      	str	r3, [r7, #8]
   return(result);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3314      	adds	r3, #20
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	61ba      	str	r2, [r7, #24]
 8003378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6979      	ldr	r1, [r7, #20]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	613b      	str	r3, [r7, #16]
   return(result);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e5      	bne.n	8003356 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d013      	beq.n	80033ba <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_UART_AbortTransmit_IT+0xe4>)
 8003398:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fb92 	bl	8001ac8 <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01c      	beq.n	80033e4 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
 80033b8:	e014      	b.n	80033e4 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb5d 	bl	8003a88 <HAL_UART_AbortTransmitCpltCallback>
 80033ce:	e009      	b.n	80033e4 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb52 	bl	8003a88 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3738      	adds	r7, #56	; 0x38
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	08003c33 	.word	0x08003c33

080033f4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b09a      	sub	sp, #104	; 0x68
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800340c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800341c:	657a      	str	r2, [r7, #84]	; 0x54
 800341e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003422:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800342a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	663b      	str	r3, [r7, #96]	; 0x60
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003450:	643a      	str	r2, [r7, #64]	; 0x40
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d119      	bne.n	80034a0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	61fb      	str	r3, [r7, #28]
   return(result);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800348c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d13f      	bne.n	800352e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034ce:	61ba      	str	r2, [r7, #24]
 80034d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	613b      	str	r3, [r7, #16]
   return(result);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d013      	beq.n	8003512 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_UART_AbortReceive_IT+0x160>)
 80034f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fae6 	bl	8001ac8 <HAL_DMA_Abort_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d022      	beq.n	8003548 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
 8003510:	e01a      	b.n	8003548 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fab8 	bl	8003a9c <HAL_UART_AbortReceiveCpltCallback>
 800352c:	e00c      	b.n	8003548 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 faaa 	bl	8003a9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3768      	adds	r7, #104	; 0x68
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	08003c5d 	.word	0x08003c5d

08003558 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0ba      	sub	sp, #232	; 0xe8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_UART_IRQHandler+0x66>
 80035aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fbd0 	bl	8003d5c <UART_Receive_IT>
      return;
 80035bc:	e256      	b.n	8003a6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80de 	beq.w	8003784 <HAL_UART_IRQHandler+0x22c>
 80035c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80d1 	beq.w	8003784 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_UART_IRQHandler+0xae>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_UART_IRQHandler+0xd2>
 8003612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_UART_IRQHandler+0xf6>
 8003636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <HAL_UART_IRQHandler+0x126>
 800365a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0208 	orr.w	r2, r3, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 81ed 	beq.w	8003a62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_UART_IRQHandler+0x14e>
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb5b 	bl	8003d5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_UART_IRQHandler+0x17a>
 80036ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d04f      	beq.n	8003772 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa36 	bl	8003b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d141      	bne.n	800376a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003712:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800371e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800372a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1d9      	bne.n	80036e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d013      	beq.n	8003762 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	4a7d      	ldr	r2, [pc, #500]	; (8003934 <HAL_UART_IRQHandler+0x3dc>)
 8003740:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe f9be 	bl	8001ac8 <HAL_DMA_Abort_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	e00e      	b.n	8003780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f986 	bl	8003a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00a      	b.n	8003780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f982 	bl	8003a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e006      	b.n	8003780 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f97e 	bl	8003a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800377e:	e170      	b.n	8003a62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	bf00      	nop
    return;
 8003782:	e16e      	b.n	8003a62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	2b01      	cmp	r3, #1
 800378a:	f040 814a 	bne.w	8003a22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8143 	beq.w	8003a22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 813c 	beq.w	8003a22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	f040 80b4 	bne.w	8003938 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8140 	beq.w	8003a66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ee:	429a      	cmp	r2, r3
 80037f0:	f080 8139 	bcs.w	8003a66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	f000 8088 	beq.w	800391a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800383a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003842:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800384e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1d9      	bne.n	800380a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3314      	adds	r3, #20
 800385c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800387a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800387e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003882:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800388c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e1      	bne.n	8003856 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3314      	adds	r3, #20
 8003898:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e3      	bne.n	8003892 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	f023 0310 	bic.w	r3, r3, #16
 80038ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80038fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e3      	bne.n	80038d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe f867 	bl	80019e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003922:	b29b      	uxth	r3, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	b29b      	uxth	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8c0 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003930:	e099      	b.n	8003a66 <HAL_UART_IRQHandler+0x50e>
 8003932:	bf00      	nop
 8003934:	08003c0b 	.word	0x08003c0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003940:	b29b      	uxth	r3, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 808b 	beq.w	8003a6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8086 	beq.w	8003a6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003982:	647a      	str	r2, [r7, #68]	; 0x44
 8003984:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e3      	bne.n	800395e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3314      	adds	r3, #20
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	623b      	str	r3, [r7, #32]
   return(result);
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039ba:	633a      	str	r2, [r7, #48]	; 0x30
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e3      	bne.n	8003996 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0310 	bic.w	r3, r3, #16
 80039f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a00:	61fa      	str	r2, [r7, #28]
 8003a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e3      	bne.n	80039dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f848 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a20:	e023      	b.n	8003a6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_UART_IRQHandler+0x4ea>
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f926 	bl	8003c8c <UART_Transmit_IT>
    return;
 8003a40:	e014      	b.n	8003a6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <HAL_UART_IRQHandler+0x514>
 8003a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f966 	bl	8003d2c <UART_EndTransmit_IT>
    return;
 8003a60:	e004      	b.n	8003a6c <HAL_UART_IRQHandler+0x514>
    return;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <HAL_UART_IRQHandler+0x514>
      return;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HAL_UART_IRQHandler+0x514>
      return;
 8003a6a:	bf00      	nop
  }
}
 8003a6c:	37e8      	adds	r7, #232	; 0xe8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop

08003a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2222      	movs	r2, #34	; 0x22
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0220 	orr.w	r2, r2, #32
 8003b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b095      	sub	sp, #84	; 0x54
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b6c:	643a      	str	r2, [r7, #64]	; 0x40
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d119      	bne.n	8003bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bdc:	61ba      	str	r2, [r7, #24]
 8003bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bfe:	bf00      	nop
 8003c00:	3754      	adds	r7, #84	; 0x54
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff25 	bl	8003a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff ff1a 	bl	8003a88 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff0c 	bl	8003a9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b21      	cmp	r3, #33	; 0x21
 8003c9e:	d13e      	bne.n	8003d1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d114      	bne.n	8003cd4 <UART_Transmit_IT+0x48>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d110      	bne.n	8003cd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]
 8003cd2:	e008      	b.n	8003ce6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	1c59      	adds	r1, r3, #1
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6211      	str	r1, [r2, #32]
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fc ff88 	bl	8000c62 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	; 0x30
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	f040 80ab 	bne.w	8003ec8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	d117      	bne.n	8003dac <UART_Receive_IT+0x50>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d113      	bne.n	8003dac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	629a      	str	r2, [r3, #40]	; 0x28
 8003daa:	e026      	b.n	8003dfa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	d007      	beq.n	8003dd0 <UART_Receive_IT+0x74>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <UART_Receive_IT+0x82>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e008      	b.n	8003df0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4619      	mov	r1, r3
 8003e08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15a      	bne.n	8003ec4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0220 	bic.w	r2, r2, #32
 8003e1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d135      	bne.n	8003eba <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	613b      	str	r3, [r7, #16]
   return(result);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f023 0310 	bic.w	r3, r3, #16
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	623a      	str	r2, [r7, #32]
 8003e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69f9      	ldr	r1, [r7, #28]
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d10a      	bne.n	8003eac <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fdfc 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
 8003eb8:	e002      	b.n	8003ec0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fec6 	bl	8000c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e002      	b.n	8003eca <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3730      	adds	r7, #48	; 0x30
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed8:	b0c0      	sub	sp, #256	; 0x100
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	68d9      	ldr	r1, [r3, #12]
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	ea40 0301 	orr.w	r3, r0, r1
 8003efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f2c:	f021 010c 	bic.w	r1, r1, #12
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	6999      	ldr	r1, [r3, #24]
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	ea40 0301 	orr.w	r3, r0, r1
 8003f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4b8f      	ldr	r3, [pc, #572]	; (80041a0 <UART_SetConfig+0x2cc>)
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d005      	beq.n	8003f74 <UART_SetConfig+0xa0>
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b8d      	ldr	r3, [pc, #564]	; (80041a4 <UART_SetConfig+0x2d0>)
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d104      	bne.n	8003f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7fe fc2a 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8003f78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f7c:	e003      	b.n	8003f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f7e:	f7fe fc11 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003f82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	f040 810c 	bne.w	80041ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	1891      	adds	r1, r2, r2
 8003fac:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fae:	415b      	adcs	r3, r3
 8003fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	eb12 0801 	adds.w	r8, r2, r1
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	eb43 0901 	adc.w	r9, r3, r1
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	4699      	mov	r9, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	eb18 0303 	adds.w	r3, r8, r3
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	eb49 0303 	adc.w	r3, r9, r3
 8003fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004002:	460b      	mov	r3, r1
 8004004:	18db      	adds	r3, r3, r3
 8004006:	653b      	str	r3, [r7, #80]	; 0x50
 8004008:	4613      	mov	r3, r2
 800400a:	eb42 0303 	adc.w	r3, r2, r3
 800400e:	657b      	str	r3, [r7, #84]	; 0x54
 8004010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004018:	f7fc f92a 	bl	8000270 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <UART_SetConfig+0x2d4>)
 8004022:	fba3 2302 	umull	r2, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	011c      	lsls	r4, r3, #4
 800402a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004034:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	64b9      	str	r1, [r7, #72]	; 0x48
 8004044:	415b      	adcs	r3, r3
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800404c:	4641      	mov	r1, r8
 800404e:	eb12 0a01 	adds.w	sl, r2, r1
 8004052:	4649      	mov	r1, r9
 8004054:	eb43 0b01 	adc.w	fp, r3, r1
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406c:	4692      	mov	sl, r2
 800406e:	469b      	mov	fp, r3
 8004070:	4643      	mov	r3, r8
 8004072:	eb1a 0303 	adds.w	r3, sl, r3
 8004076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800407a:	464b      	mov	r3, r9
 800407c:	eb4b 0303 	adc.w	r3, fp, r3
 8004080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004090:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004098:	460b      	mov	r3, r1
 800409a:	18db      	adds	r3, r3, r3
 800409c:	643b      	str	r3, [r7, #64]	; 0x40
 800409e:	4613      	mov	r3, r2
 80040a0:	eb42 0303 	adc.w	r3, r2, r3
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
 80040a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ae:	f7fc f8df 	bl	8000270 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <UART_SetConfig+0x2d4>)
 80040ba:	fba3 2301 	umull	r2, r3, r3, r1
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2264      	movs	r2, #100	; 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	1acb      	subs	r3, r1, r3
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <UART_SetConfig+0x2d4>)
 80040d0:	fba3 2302 	umull	r2, r3, r3, r2
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040dc:	441c      	add	r4, r3
 80040de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	1891      	adds	r1, r2, r2
 80040f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040f8:	415b      	adcs	r3, r3
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004100:	4641      	mov	r1, r8
 8004102:	1851      	adds	r1, r2, r1
 8004104:	6339      	str	r1, [r7, #48]	; 0x30
 8004106:	4649      	mov	r1, r9
 8004108:	414b      	adcs	r3, r1
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004118:	4659      	mov	r1, fp
 800411a:	00cb      	lsls	r3, r1, #3
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004122:	4651      	mov	r1, sl
 8004124:	00ca      	lsls	r2, r1, #3
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	4603      	mov	r3, r0
 800412c:	4642      	mov	r2, r8
 800412e:	189b      	adds	r3, r3, r2
 8004130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004134:	464b      	mov	r3, r9
 8004136:	460a      	mov	r2, r1
 8004138:	eb42 0303 	adc.w	r3, r2, r3
 800413c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800414c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004154:	460b      	mov	r3, r1
 8004156:	18db      	adds	r3, r3, r3
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
 800415a:	4613      	mov	r3, r2
 800415c:	eb42 0303 	adc.w	r3, r2, r3
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800416a:	f7fc f881 	bl	8000270 <__aeabi_uldivmod>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <UART_SetConfig+0x2d4>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2164      	movs	r1, #100	; 0x64
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <UART_SetConfig+0x2d4>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 0207 	and.w	r2, r3, #7
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4422      	add	r2, r4
 800419a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800419c:	e106      	b.n	80043ac <UART_SetConfig+0x4d8>
 800419e:	bf00      	nop
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40011400 	.word	0x40011400
 80041a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041be:	4642      	mov	r2, r8
 80041c0:	464b      	mov	r3, r9
 80041c2:	1891      	adds	r1, r2, r2
 80041c4:	6239      	str	r1, [r7, #32]
 80041c6:	415b      	adcs	r3, r3
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ce:	4641      	mov	r1, r8
 80041d0:	1854      	adds	r4, r2, r1
 80041d2:	4649      	mov	r1, r9
 80041d4:	eb43 0501 	adc.w	r5, r3, r1
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	00eb      	lsls	r3, r5, #3
 80041e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e6:	00e2      	lsls	r2, r4, #3
 80041e8:	4614      	mov	r4, r2
 80041ea:	461d      	mov	r5, r3
 80041ec:	4643      	mov	r3, r8
 80041ee:	18e3      	adds	r3, r4, r3
 80041f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041f4:	464b      	mov	r3, r9
 80041f6:	eb45 0303 	adc.w	r3, r5, r3
 80041fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800420a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800421a:	4629      	mov	r1, r5
 800421c:	008b      	lsls	r3, r1, #2
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004224:	4621      	mov	r1, r4
 8004226:	008a      	lsls	r2, r1, #2
 8004228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800422c:	f7fc f820 	bl	8000270 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4b60      	ldr	r3, [pc, #384]	; (80043b8 <UART_SetConfig+0x4e4>)
 8004236:	fba3 2302 	umull	r2, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	011c      	lsls	r4, r3, #4
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800424c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	61b9      	str	r1, [r7, #24]
 8004258:	415b      	adcs	r3, r3
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6139      	str	r1, [r7, #16]
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004294:	464b      	mov	r3, r9
 8004296:	460a      	mov	r2, r1
 8004298:	eb42 0303 	adc.w	r3, r2, r3
 800429c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042b8:	4649      	mov	r1, r9
 80042ba:	008b      	lsls	r3, r1, #2
 80042bc:	4641      	mov	r1, r8
 80042be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c2:	4641      	mov	r1, r8
 80042c4:	008a      	lsls	r2, r1, #2
 80042c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ca:	f7fb ffd1 	bl	8000270 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <UART_SetConfig+0x4e4>)
 80042d6:	fba3 2301 	umull	r2, r3, r3, r1
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2264      	movs	r2, #100	; 0x64
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	1acb      	subs	r3, r1, r3
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	3332      	adds	r3, #50	; 0x32
 80042e8:	4a33      	ldr	r2, [pc, #204]	; (80043b8 <UART_SetConfig+0x4e4>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f4:	441c      	add	r4, r3
 80042f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fa:	2200      	movs	r2, #0
 80042fc:	673b      	str	r3, [r7, #112]	; 0x70
 80042fe:	677a      	str	r2, [r7, #116]	; 0x74
 8004300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	415b      	adcs	r3, r3
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004314:	4641      	mov	r1, r8
 8004316:	1851      	adds	r1, r2, r1
 8004318:	6039      	str	r1, [r7, #0]
 800431a:	4649      	mov	r1, r9
 800431c:	414b      	adcs	r3, r1
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800432c:	4659      	mov	r1, fp
 800432e:	00cb      	lsls	r3, r1, #3
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004336:	4651      	mov	r1, sl
 8004338:	00ca      	lsls	r2, r1, #3
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	4603      	mov	r3, r0
 8004340:	4642      	mov	r2, r8
 8004342:	189b      	adds	r3, r3, r2
 8004344:	66bb      	str	r3, [r7, #104]	; 0x68
 8004346:	464b      	mov	r3, r9
 8004348:	460a      	mov	r2, r1
 800434a:	eb42 0303 	adc.w	r3, r2, r3
 800434e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	663b      	str	r3, [r7, #96]	; 0x60
 800435a:	667a      	str	r2, [r7, #100]	; 0x64
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800437a:	f7fb ff79 	bl	8000270 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <UART_SetConfig+0x4e4>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <UART_SetConfig+0x4e4>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 020f 	and.w	r2, r3, #15
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4422      	add	r2, r4
 80043aa:	609a      	str	r2, [r3, #8]
}
 80043ac:	bf00      	nop
 80043ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043b2:	46bd      	mov	sp, r7
 80043b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b8:	51eb851f 	.word	0x51eb851f

080043bc <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d16c      	bne.n	80044ac <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3301      	adds	r3, #1
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3302      	adds	r3, #2
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	8abb      	ldrh	r3, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80043ec:	8abb      	ldrh	r3, [r7, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3303      	adds	r3, #3
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b29a      	uxth	r2, r3
 8004406:	8a7b      	ldrh	r3, [r7, #18]
 8004408:	4313      	orrs	r3, r2
 800440a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800440c:	8a7b      	ldrh	r3, [r7, #18]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d049      	beq.n	80044a6 <eMBFuncReadCoils+0xea>
 8004412:	8a7b      	ldrh	r3, [r7, #18]
 8004414:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004418:	d245      	bcs.n	80044a6 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	60fa      	str	r2, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800443a:	8a7b      	ldrh	r3, [r7, #18]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004444:	8a7b      	ldrh	r3, [r7, #18]
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	b29b      	uxth	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
 8004450:	e003      	b.n	800445a <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8004452:	8a7b      	ldrh	r3, [r7, #18]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	b29b      	uxth	r3, r3
 8004458:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	60fa      	str	r2, [r7, #12]
 8004460:	7dfa      	ldrb	r2, [r7, #23]
 8004462:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004470:	8a7a      	ldrh	r2, [r7, #18]
 8004472:	8ab9      	ldrh	r1, [r7, #20]
 8004474:	2300      	movs	r3, #0
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7fc fd66 	bl	8000f48 <eMBRegCoilsCB>
 800447c:	4603      	mov	r3, r0
 800447e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004480:	7afb      	ldrb	r3, [r7, #11]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fc2b 	bl	8004ce4 <prveMBError2Exception>
 800448e:	4603      	mov	r3, r0
 8004490:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8004492:	e00d      	b.n	80044b0 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	881a      	ldrh	r2, [r3, #0]
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	b29b      	uxth	r3, r3
 800449c:	4413      	add	r3, r2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80044a4:	e004      	b.n	80044b0 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80044a6:	2303      	movs	r3, #3
 80044a8:	75bb      	strb	r3, [r7, #22]
 80044aa:	e001      	b.n	80044b0 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80044ac:	2303      	movs	r3, #3
 80044ae:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80044b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d140      	bne.n	8004552 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3302      	adds	r3, #2
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	89bb      	ldrh	r3, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80044ea:	89bb      	ldrh	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d128      	bne.n	800454c <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3303      	adds	r3, #3
 80044fe:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004500:	2bff      	cmp	r3, #255	; 0xff
 8004502:	d004      	beq.n	800450e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3303      	adds	r3, #3
 8004508:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11e      	bne.n	800454c <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3303      	adds	r3, #3
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2bff      	cmp	r3, #255	; 0xff
 800451a:	d102      	bne.n	8004522 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 800451c:	2301      	movs	r3, #1
 800451e:	723b      	strb	r3, [r7, #8]
 8004520:	e001      	b.n	8004526 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004526:	89b9      	ldrh	r1, [r7, #12]
 8004528:	f107 0008 	add.w	r0, r7, #8
 800452c:	2301      	movs	r3, #1
 800452e:	2201      	movs	r2, #1
 8004530:	f7fc fd0a 	bl	8000f48 <eMBRegCoilsCB>
 8004534:	4603      	mov	r3, r0
 8004536:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fbcf 	bl	8004ce4 <prveMBError2Exception>
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800454a:	e004      	b.n	8004556 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800454c:	2303      	movs	r3, #3
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e001      	b.n	8004556 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004552:	2303      	movs	r3, #3
 8004554:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800456a:	2300      	movs	r3, #0
 800456c:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	2b05      	cmp	r3, #5
 8004574:	d954      	bls.n	8004620 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3301      	adds	r3, #1
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3302      	adds	r3, #2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b29a      	uxth	r2, r3
 800458a:	89bb      	ldrh	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8004590:	89bb      	ldrh	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3303      	adds	r3, #3
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	795b      	ldrb	r3, [r3, #5]
 80045b4:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80045c0:	897b      	ldrh	r3, [r7, #10]
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e003      	b.n	80045d6 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01e      	beq.n	800461a <eMBFuncWriteMultipleCoils+0xba>
 80045dc:	897b      	ldrh	r3, [r7, #10]
 80045de:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80045e2:	d81a      	bhi.n	800461a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	7a7b      	ldrb	r3, [r7, #9]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d116      	bne.n	800461a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1d98      	adds	r0, r3, #6
 80045f0:	897a      	ldrh	r2, [r7, #10]
 80045f2:	89b9      	ldrh	r1, [r7, #12]
 80045f4:	2301      	movs	r3, #1
 80045f6:	f7fc fca7 	bl	8000f48 <eMBRegCoilsCB>
 80045fa:	4603      	mov	r3, r0
 80045fc:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80045fe:	7a3b      	ldrb	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d006      	beq.n	8004612 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004604:	7a3b      	ldrb	r3, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb6c 	bl	8004ce4 <prveMBError2Exception>
 800460c:	4603      	mov	r3, r0
 800460e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8004610:	e008      	b.n	8004624 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2205      	movs	r2, #5
 8004616:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8004618:	e004      	b.n	8004624 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800461a:	2303      	movs	r3, #3
 800461c:	73bb      	strb	r3, [r7, #14]
 800461e:	e001      	b.n	8004624 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004620:	2303      	movs	r3, #3
 8004622:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8004624:	7bbb      	ldrb	r3, [r7, #14]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004638:	2300      	movs	r3, #0
 800463a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d16c      	bne.n	800471e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3301      	adds	r3, #1
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3302      	adds	r3, #2
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b29a      	uxth	r2, r3
 8004658:	8abb      	ldrh	r3, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800465e:	8abb      	ldrh	r3, [r7, #20]
 8004660:	3301      	adds	r3, #1
 8004662:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3303      	adds	r3, #3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b29a      	uxth	r2, r3
 8004678:	8a7b      	ldrh	r3, [r7, #18]
 800467a:	4313      	orrs	r3, r2
 800467c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 800467e:	8a7b      	ldrh	r3, [r7, #18]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d049      	beq.n	8004718 <eMBFuncReadDiscreteInputs+0xea>
 8004684:	8a7b      	ldrh	r3, [r7, #18]
 8004686:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800468a:	d245      	bcs.n	8004718 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	60fa      	str	r2, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80046b6:	8a7b      	ldrh	r3, [r7, #18]
 80046b8:	08db      	lsrs	r3, r3, #3
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	3301      	adds	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
 80046c2:	e003      	b.n	80046cc <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80046c4:	8a7b      	ldrh	r3, [r7, #18]
 80046c6:	08db      	lsrs	r3, r3, #3
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	60fa      	str	r2, [r7, #12]
 80046d2:	7dfa      	ldrb	r2, [r7, #23]
 80046d4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	3301      	adds	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80046e2:	8a7a      	ldrh	r2, [r7, #18]
 80046e4:	8abb      	ldrh	r3, [r7, #20]
 80046e6:	4619      	mov	r1, r3
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7fc fc99 	bl	8001020 <eMBRegDiscreteCB>
 80046ee:	4603      	mov	r3, r0
 80046f0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80046f2:	7afb      	ldrb	r3, [r7, #11]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80046f8:	7afb      	ldrb	r3, [r7, #11]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 faf2 	bl	8004ce4 <prveMBError2Exception>
 8004700:	4603      	mov	r3, r0
 8004702:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8004704:	e00d      	b.n	8004722 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	b29b      	uxth	r3, r3
 800470e:	4413      	add	r3, r2
 8004710:	b29a      	uxth	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8004716:	e004      	b.n	8004722 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004718:	2303      	movs	r3, #3
 800471a:	75bb      	strb	r3, [r7, #22]
 800471c:	e001      	b.n	8004722 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800471e:	2303      	movs	r3, #3
 8004720:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8004722:	7dbb      	ldrb	r3, [r7, #22]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	2b05      	cmp	r3, #5
 8004740:	d122      	bne.n	8004788 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3301      	adds	r3, #1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3302      	adds	r3, #2
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b29a      	uxth	r2, r3
 8004756:	89bb      	ldrh	r3, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800475c:	89bb      	ldrh	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1cd8      	adds	r0, r3, #3
 8004766:	89b9      	ldrh	r1, [r7, #12]
 8004768:	2301      	movs	r3, #1
 800476a:	2201      	movs	r2, #1
 800476c:	f7fc fb78 	bl	8000e60 <eMBRegHoldingCB>
 8004770:	4603      	mov	r3, r0
 8004772:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8004774:	7afb      	ldrb	r3, [r7, #11]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fab1 	bl	8004ce4 <prveMBError2Exception>
 8004782:	4603      	mov	r3, r0
 8004784:	73fb      	strb	r3, [r7, #15]
 8004786:	e001      	b.n	800478c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004788:	2303      	movs	r3, #3
 800478a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d946      	bls.n	800483a <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3301      	adds	r3, #1
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3302      	adds	r3, #2
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	89bb      	ldrh	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80047c6:	89bb      	ldrh	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3303      	adds	r3, #3
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b29a      	uxth	r2, r3
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	795b      	ldrb	r3, [r3, #5]
 80047ea:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80047ec:	897b      	ldrh	r3, [r7, #10]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d020      	beq.n	8004834 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	2b78      	cmp	r3, #120	; 0x78
 80047f6:	d81d      	bhi.n	8004834 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80047f8:	897b      	ldrh	r3, [r7, #10]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8004800:	7a7a      	ldrb	r2, [r7, #9]
 8004802:	429a      	cmp	r2, r3
 8004804:	d116      	bne.n	8004834 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	1d98      	adds	r0, r3, #6
 800480a:	897a      	ldrh	r2, [r7, #10]
 800480c:	89b9      	ldrh	r1, [r7, #12]
 800480e:	2301      	movs	r3, #1
 8004810:	f7fc fb26 	bl	8000e60 <eMBRegHoldingCB>
 8004814:	4603      	mov	r3, r0
 8004816:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004818:	7a3b      	ldrb	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800481e:	7a3b      	ldrb	r3, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fa5f 	bl	8004ce4 <prveMBError2Exception>
 8004826:	4603      	mov	r3, r0
 8004828:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800482a:	e008      	b.n	800483e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2205      	movs	r2, #5
 8004830:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8004832:	e004      	b.n	800483e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004834:	2303      	movs	r3, #3
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e001      	b.n	800483e <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800483a:	2303      	movs	r3, #3
 800483c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004852:	2300      	movs	r3, #0
 8004854:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	2b05      	cmp	r3, #5
 800485c:	d15c      	bne.n	8004918 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3301      	adds	r3, #1
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3302      	adds	r3, #2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	b29a      	uxth	r2, r3
 8004872:	8abb      	ldrh	r3, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8004878:	8abb      	ldrh	r3, [r7, #20]
 800487a:	3301      	adds	r3, #1
 800487c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3303      	adds	r3, #3
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004892:	8a7b      	ldrh	r3, [r7, #18]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d03c      	beq.n	8004912 <eMBFuncReadHoldingRegister+0xca>
 8004898:	8a7b      	ldrh	r3, [r7, #18]
 800489a:	2b7d      	cmp	r3, #125	; 0x7d
 800489c:	d839      	bhi.n	8004912 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	60fa      	str	r2, [r7, #12]
 80048ae:	2203      	movs	r2, #3
 80048b0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	60f9      	str	r1, [r7, #12]
 80048c8:	0052      	lsls	r2, r2, #1
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80048da:	8a7a      	ldrh	r2, [r7, #18]
 80048dc:	8ab9      	ldrh	r1, [r7, #20]
 80048de:	2300      	movs	r3, #0
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7fc fabd 	bl	8000e60 <eMBRegHoldingCB>
 80048e6:	4603      	mov	r3, r0
 80048e8:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f9f6 	bl	8004ce4 <prveMBError2Exception>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80048fc:	e00e      	b.n	800491c <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	881a      	ldrh	r2, [r3, #0]
 8004902:	8a7b      	ldrh	r3, [r7, #18]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	4413      	add	r3, r2
 800490a:	b29a      	uxth	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8004910:	e004      	b.n	800491c <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004912:	2303      	movs	r3, #3
 8004914:	75fb      	strb	r3, [r7, #23]
 8004916:	e001      	b.n	800491c <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004918:	2303      	movs	r3, #3
 800491a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	2b09      	cmp	r3, #9
 800493a:	f240 8099 	bls.w	8004a70 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3301      	adds	r3, #1
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3302      	adds	r3, #2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	8abb      	ldrh	r3, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8004958:	8abb      	ldrh	r3, [r7, #20]
 800495a:	3301      	adds	r3, #1
 800495c:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3303      	adds	r3, #3
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b29a      	uxth	r2, r3
 8004972:	8a7b      	ldrh	r3, [r7, #18]
 8004974:	4313      	orrs	r3, r2
 8004976:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3305      	adds	r3, #5
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3306      	adds	r3, #6
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b29a      	uxth	r2, r3
 800498c:	8a3b      	ldrh	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8004992:	8a3b      	ldrh	r3, [r7, #16]
 8004994:	3301      	adds	r3, #1
 8004996:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3307      	adds	r3, #7
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3308      	adds	r3, #8
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7a5b      	ldrb	r3, [r3, #9]
 80049b6:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80049b8:	8a7b      	ldrh	r3, [r7, #18]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d056      	beq.n	8004a6c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80049be:	8a7b      	ldrh	r3, [r7, #18]
 80049c0:	2b7d      	cmp	r3, #125	; 0x7d
 80049c2:	d853      	bhi.n	8004a6c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80049c4:	89fb      	ldrh	r3, [r7, #14]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d050      	beq.n	8004a6c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	2b79      	cmp	r3, #121	; 0x79
 80049ce:	d84d      	bhi.n	8004a6c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	005a      	lsls	r2, r3, #1
 80049d4:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d148      	bne.n	8004a6c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f103 000a 	add.w	r0, r3, #10
 80049e0:	89fa      	ldrh	r2, [r7, #14]
 80049e2:	8a39      	ldrh	r1, [r7, #16]
 80049e4:	2301      	movs	r3, #1
 80049e6:	f7fc fa3b 	bl	8000e60 <eMBRegHoldingCB>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80049ee:	7dbb      	ldrb	r3, [r7, #22]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d131      	bne.n	8004a58 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	60ba      	str	r2, [r7, #8]
 8004a04:	2217      	movs	r2, #23
 8004a06:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004a14:	8a7b      	ldrh	r3, [r7, #18]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	0052      	lsls	r2, r2, #1
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8004a30:	8a7a      	ldrh	r2, [r7, #18]
 8004a32:	8ab9      	ldrh	r1, [r7, #20]
 8004a34:	2300      	movs	r3, #0
 8004a36:	68b8      	ldr	r0, [r7, #8]
 8004a38:	f7fc fa12 	bl	8000e60 <eMBRegHoldingCB>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8004a40:	7dbb      	ldrb	r3, [r7, #22]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	881a      	ldrh	r2, [r3, #0]
 8004a4a:	8a7b      	ldrh	r3, [r7, #18]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8004a58:	7dbb      	ldrb	r3, [r7, #22]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004a5e:	7dbb      	ldrb	r3, [r7, #22]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f93f 	bl	8004ce4 <prveMBError2Exception>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8004a6a:	e001      	b.n	8004a70 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d15f      	bne.n	8004b50 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3301      	adds	r3, #1
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	8abb      	ldrh	r3, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8004aaa:	8abb      	ldrh	r3, [r7, #20]
 8004aac:	3301      	adds	r3, #1
 8004aae:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3303      	adds	r3, #3
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	8a7b      	ldrh	r3, [r7, #18]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8004aca:	8a7b      	ldrh	r3, [r7, #18]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d03c      	beq.n	8004b4a <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8004ad0:	8a7b      	ldrh	r3, [r7, #18]
 8004ad2:	2b7c      	cmp	r3, #124	; 0x7c
 8004ad4:	d839      	bhi.n	8004b4a <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	60fa      	str	r2, [r7, #12]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8004af6:	8a7b      	ldrh	r3, [r7, #18]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1c59      	adds	r1, r3, #1
 8004afe:	60f9      	str	r1, [r7, #12]
 8004b00:	0052      	lsls	r2, r2, #1
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8004b12:	8a7a      	ldrh	r2, [r7, #18]
 8004b14:	8abb      	ldrh	r3, [r7, #20]
 8004b16:	4619      	mov	r1, r3
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7fc f95f 	bl	8000ddc <eMBRegInputCB>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f8da 	bl	8004ce4 <prveMBError2Exception>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8004b34:	e00e      	b.n	8004b54 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	881a      	ldrh	r2, [r3, #0]
 8004b3a:	8a7b      	ldrh	r3, [r7, #18]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8004b48:	e004      	b.n	8004b54 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	75fb      	strb	r3, [r7, #23]
 8004b4e:	e001      	b.n	8004b54 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004b50:	2303      	movs	r3, #3
 8004b52:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <eMBFuncReportSlaveID+0x30>)
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	4908      	ldr	r1, [pc, #32]	; (8004b94 <eMBFuncReportSlaveID+0x34>)
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 ffa7 	bl	8005ac8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <eMBFuncReportSlaveID+0x30>)
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	2000026c 	.word	0x2000026c
 8004b94:	2000024c 	.word	0x2000024c

08004b98 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	807b      	strh	r3, [r7, #2]
 8004baa:	460b      	mov	r3, r1
 8004bac:	707b      	strb	r3, [r7, #1]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8004bb2:	783b      	ldrb	r3, [r7, #0]
 8004bb4:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d905      	bls.n	8004bc8 <xMBUtilSetBits+0x30>
 8004bbc:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <xMBUtilSetBits+0xcc>)
 8004bbe:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <xMBUtilSetBits+0xd0>)
 8004bc0:	2137      	movs	r1, #55	; 0x37
 8004bc2:	482a      	ldr	r0, [pc, #168]	; (8004c6c <xMBUtilSetBits+0xd4>)
 8004bc4:	f000 fde2 	bl	800578c <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	08db      	lsrs	r3, r3, #3
 8004bcc:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8004bce:	8abb      	ldrh	r3, [r7, #20]
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	887a      	ldrh	r2, [r7, #2]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8004bda:	8afa      	ldrh	r2, [r7, #22]
 8004bdc:	8a7b      	ldrh	r3, [r7, #18]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	2201      	movs	r2, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8004bf2:	8a3a      	ldrh	r2, [r7, #16]
 8004bf4:	8879      	ldrh	r1, [r7, #2]
 8004bf6:	8abb      	ldrh	r3, [r7, #20]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	1acb      	subs	r3, r1, r3
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8004c02:	8abb      	ldrh	r3, [r7, #20]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004c0c:	8abb      	ldrh	r3, [r7, #20]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	b21a      	sxth	r2, r3
 8004c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b21b      	sxth	r3, r3
 8004c22:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8004c24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	b21a      	sxth	r2, r3
 8004c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c30:	4013      	ands	r3, r2
 8004c32:	b21a      	sxth	r2, r3
 8004c34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b21b      	sxth	r3, r3
 8004c3c:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8004c3e:	8abb      	ldrh	r3, [r7, #20]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	89fa      	ldrh	r2, [r7, #14]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	8abb      	ldrh	r3, [r7, #20]
 8004c52:	3301      	adds	r3, #1
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	b2ca      	uxtb	r2, r1
 8004c5a:	701a      	strb	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	080066dc 	.word	0x080066dc
 8004c68:	08006810 	.word	0x08006810
 8004c6c:	080066ec 	.word	0x080066ec

08004c70 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	807b      	strh	r3, [r7, #2]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	08db      	lsrs	r3, r3, #3
 8004c84:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8004c86:	89fb      	ldrh	r3, [r7, #14]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	887a      	ldrh	r2, [r7, #2]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8004c92:	787b      	ldrb	r3, [r7, #1]
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	3301      	adds	r3, #1
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	b21a      	sxth	r2, r3
 8004cb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8004cc2:	893a      	ldrh	r2, [r7, #8]
 8004cc4:	89bb      	ldrh	r3, [r7, #12]
 8004cc6:	fa42 f303 	asr.w	r3, r2, r3
 8004cca:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8004ccc:	893a      	ldrh	r2, [r7, #8]
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8004cd4:	893b      	ldrh	r3, [r7, #8]
 8004cd6:	b2db      	uxtb	r3, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	2b07      	cmp	r3, #7
 8004cf2:	d00c      	beq.n	8004d0e <prveMBError2Exception+0x2a>
 8004cf4:	2b07      	cmp	r3, #7
 8004cf6:	dc0d      	bgt.n	8004d14 <prveMBError2Exception+0x30>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <prveMBError2Exception+0x1e>
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d003      	beq.n	8004d08 <prveMBError2Exception+0x24>
 8004d00:	e008      	b.n	8004d14 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
            break;
 8004d06:	e008      	b.n	8004d1a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	73fb      	strb	r3, [r7, #15]
            break;
 8004d0c:	e005      	b.n	8004d1a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8004d0e:	2306      	movs	r3, #6
 8004d10:	73fb      	strb	r3, [r7, #15]
            break;
 8004d12:	e002      	b.n	8004d1a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8004d14:	2304      	movs	r3, #4
 8004d16:	73fb      	strb	r3, [r7, #15]
            break;
 8004d18:	bf00      	nop
    }

    return eStatus;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4603      	mov	r3, r0
 8004d32:	71fb      	strb	r3, [r7, #7]
 8004d34:	460b      	mov	r3, r1
 8004d36:	71bb      	strb	r3, [r7, #6]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8004d40:	79bb      	ldrb	r3, [r7, #6]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <eMBInit+0x2a>
 8004d46:	79bb      	ldrb	r3, [r7, #6]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8004d4c:	79bb      	ldrb	r3, [r7, #6]
 8004d4e:	2bf7      	cmp	r3, #247	; 0xf7
 8004d50:	d902      	bls.n	8004d58 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8004d52:	2302      	movs	r3, #2
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e03a      	b.n	8004dce <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <eMBInit+0xb0>)
 8004d5a:	79bb      	ldrb	r3, [r7, #6]
 8004d5c:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d121      	bne.n	8004da8 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8004d64:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <eMBInit+0xb4>)
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <eMBInit+0xb8>)
 8004d68:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <eMBInit+0xbc>)
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <eMBInit+0xc0>)
 8004d6e:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <eMBInit+0xc4>)
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <eMBInit+0xc8>)
 8004d74:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8004d76:	4b1f      	ldr	r3, [pc, #124]	; (8004df4 <eMBInit+0xcc>)
 8004d78:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <eMBInit+0xd0>)
 8004d7a:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8004d7c:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <eMBInit+0xd4>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8004d82:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <eMBInit+0xd8>)
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <eMBInit+0xdc>)
 8004d86:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8004d88:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <eMBInit+0xe0>)
 8004d8a:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <eMBInit+0xe4>)
 8004d8c:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <eMBInit+0xe8>)
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <eMBInit+0xec>)
 8004d92:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <eMBInit+0xb0>)
 8004d96:	7818      	ldrb	r0, [r3, #0]
 8004d98:	7e3b      	ldrb	r3, [r7, #24]
 8004d9a:	7979      	ldrb	r1, [r7, #5]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	f000 fae3 	bl	8005368 <eMBRTUInit>
 8004da2:	4603      	mov	r3, r0
 8004da4:	73fb      	strb	r3, [r7, #15]
            break;
 8004da6:	e001      	b.n	8004dac <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8004da8:	2302      	movs	r3, #2
 8004daa:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8004db2:	f000 f94f 	bl	8005054 <xMBPortEventInit>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e005      	b.n	8004dce <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <eMBInit+0xf0>)
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <eMBInit+0xf4>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2000026e 	.word	0x2000026e
 8004ddc:	20000274 	.word	0x20000274
 8004de0:	080053e1 	.word	0x080053e1
 8004de4:	20000278 	.word	0x20000278
 8004de8:	08005409 	.word	0x08005409
 8004dec:	20000270 	.word	0x20000270
 8004df0:	080054b9 	.word	0x080054b9
 8004df4:	2000027c 	.word	0x2000027c
 8004df8:	08005425 	.word	0x08005425
 8004dfc:	20000280 	.word	0x20000280
 8004e00:	20000284 	.word	0x20000284
 8004e04:	08005581 	.word	0x08005581
 8004e08:	20000288 	.word	0x20000288
 8004e0c:	08005651 	.word	0x08005651
 8004e10:	2000028c 	.word	0x2000028c
 8004e14:	08005701 	.word	0x08005701
 8004e18:	2000026f 	.word	0x2000026f
 8004e1c:	20000019 	.word	0x20000019

08004e20 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8004e26:	2300      	movs	r3, #0
 8004e28:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <eMBEnable+0x30>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d106      	bne.n	8004e40 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <eMBEnable+0x34>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <eMBEnable+0x30>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e001      	b.n	8004e44 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8004e40:	2306      	movs	r3, #6
 8004e42:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8004e44:	79fb      	ldrb	r3, [r7, #7]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000019 	.word	0x20000019
 8004e54:	20000274 	.word	0x20000274

08004e58 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8004e62:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <eMBPoll+0x14c>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	e095      	b.n	8004f9a <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8004e6e:	1cbb      	adds	r3, r7, #2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f913 	bl	800509c <xMBPortEventGet>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	f040 808d 	bne.w	8004f98 <eMBPoll+0x140>
    {
        switch ( eEvent )
 8004e7e:	78bb      	ldrb	r3, [r7, #2]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	f200 8089 	bhi.w	8004f98 <eMBPoll+0x140>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <eMBPoll+0x34>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004f99 	.word	0x08004f99
 8004e90:	08004e9d 	.word	0x08004e9d
 8004e94:	08004ecf 	.word	0x08004ecf
 8004e98:	08004f99 	.word	0x08004f99
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <eMBPoll+0x150>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a42      	ldr	r2, [pc, #264]	; (8004fac <eMBPoll+0x154>)
 8004ea2:	4943      	ldr	r1, [pc, #268]	; (8004fb0 <eMBPoll+0x158>)
 8004ea4:	4843      	ldr	r0, [pc, #268]	; (8004fb4 <eMBPoll+0x15c>)
 8004ea6:	4798      	blx	r3
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d16f      	bne.n	8004f92 <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8004eb2:	4b40      	ldr	r3, [pc, #256]	; (8004fb4 <eMBPoll+0x15c>)
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <eMBPoll+0x160>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d003      	beq.n	8004ec6 <eMBPoll+0x6e>
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <eMBPoll+0x15c>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d165      	bne.n	8004f92 <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8004ec6:	2002      	movs	r0, #2
 8004ec8:	f000 f8d2 	bl	8005070 <xMBPortEventPost>
                }
            }
            break;
 8004ecc:	e061      	b.n	8004f92 <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <eMBPoll+0x158>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <eMBPoll+0x164>)
 8004ed6:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8004ed8:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <eMBPoll+0x168>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	e01f      	b.n	8004f24 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8004ee4:	4a37      	ldr	r2, [pc, #220]	; (8004fc4 <eMBPoll+0x16c>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01d      	beq.n	8004f2c <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8004ef0:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <eMBPoll+0x16c>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <eMBPoll+0x164>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d10e      	bne.n	8004f1e <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8004f00:	4a30      	ldr	r2, [pc, #192]	; (8004fc4 <eMBPoll+0x16c>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <eMBPoll+0x158>)
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	4927      	ldr	r1, [pc, #156]	; (8004fac <eMBPoll+0x154>)
 8004f10:	4610      	mov	r0, r2
 8004f12:	4798      	blx	r3
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <eMBPoll+0x168>)
 8004f1a:	701a      	strb	r2, [r3, #0]
                    break;
 8004f1c:	e007      	b.n	8004f2e <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3301      	adds	r3, #1
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	dddc      	ble.n	8004ee4 <eMBPoll+0x8c>
 8004f2a:	e000      	b.n	8004f2e <eMBPoll+0xd6>
                    break;
 8004f2c:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004f2e:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <eMBPoll+0x15c>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02f      	beq.n	8004f96 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <eMBPoll+0x168>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01d      	beq.n	8004f7a <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <eMBPoll+0x154>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <eMBPoll+0x164>)
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <eMBPoll+0x158>)
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <eMBPoll+0x154>)
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	1c58      	adds	r0, r3, #1
 8004f52:	b284      	uxth	r4, r0
 8004f54:	4815      	ldr	r0, [pc, #84]	; (8004fac <eMBPoll+0x154>)
 8004f56:	8004      	strh	r4, [r0, #0]
 8004f58:	440b      	add	r3, r1
 8004f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <eMBPoll+0x158>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <eMBPoll+0x154>)
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	b288      	uxth	r0, r1
 8004f6e:	490f      	ldr	r1, [pc, #60]	; (8004fac <eMBPoll+0x154>)
 8004f70:	8008      	strh	r0, [r1, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	4a12      	ldr	r2, [pc, #72]	; (8004fc0 <eMBPoll+0x168>)
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <eMBPoll+0x170>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <eMBPoll+0x160>)
 8004f80:	7810      	ldrb	r0, [r2, #0]
 8004f82:	4a0b      	ldr	r2, [pc, #44]	; (8004fb0 <eMBPoll+0x158>)
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <eMBPoll+0x154>)
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	4798      	blx	r3
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8004f90:	e001      	b.n	8004f96 <eMBPoll+0x13e>
            break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <eMBPoll+0x140>
            break;
 8004f96:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000019 	.word	0x20000019
 8004fa8:	2000027c 	.word	0x2000027c
 8004fac:	20000298 	.word	0x20000298
 8004fb0:	20000294 	.word	0x20000294
 8004fb4:	20000290 	.word	0x20000290
 8004fb8:	2000026e 	.word	0x2000026e
 8004fbc:	2000029a 	.word	0x2000029a
 8004fc0:	2000029b 	.word	0x2000029b
 8004fc4:	2000001c 	.word	0x2000001c
 8004fc8:	20000270 	.word	0x20000270

08004fcc <EnterCriticalSection>:


/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004fd0:	b672      	cpsid	i
}
 8004fd2:	bf00      	nop
  __disable_irq();
  lockCounter++;
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <EnterCriticalSection+0x1c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <EnterCriticalSection+0x1c>)
 8004fdc:	6013      	str	r3, [r2, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	2000029c 	.word	0x2000029c

08004fec <ExitCriticalSection>:

/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  lockCounter--;
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <ExitCriticalSection+0x24>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4a06      	ldr	r2, [pc, #24]	; (8005010 <ExitCriticalSection+0x24>)
 8004ff8:	6013      	str	r3, [r2, #0]
  if (lockCounter == 0)
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <ExitCriticalSection+0x24>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <ExitCriticalSection+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8005002:	b662      	cpsie	i
}
 8005004:	bf00      	nop
  {
    __enable_irq();
  }
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	2000029c 	.word	0x2000029c

08005014 <MT_PORT_SetTimerModule>:

/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  modbusTimer = timer;
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <MT_PORT_SetTimerModule+0x1c>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6013      	str	r3, [r2, #0]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	200002a4 	.word	0x200002a4

08005034 <MT_PORT_SetUartModule>:

/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  modbusUart = uart;
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <MT_PORT_SetUartModule+0x1c>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6013      	str	r3, [r2, #0]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	200002a0 	.word	0x200002a0

08005054 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <xMBPortEventInit+0x18>)
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800505e:	2301      	movs	r3, #1
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	200002a9 	.word	0x200002a9

08005070 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <xMBPortEventPost+0x24>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8005080:	4a05      	ldr	r2, [pc, #20]	; (8005098 <xMBPortEventPost+0x28>)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8005086:	2301      	movs	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	200002a9 	.word	0x200002a9
 8005098:	200002a8 	.word	0x200002a8

0800509c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <xMBPortEventGet+0x34>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 80050b0:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <xMBPortEventGet+0x38>)
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <xMBPortEventGet+0x34>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	200002a9 	.word	0x200002a9
 80050d4:	200002a8 	.word	0x200002a8

080050d8 <vMBPortSerialEnable>:
uint8_t rxByte = 0x00;

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	460a      	mov	r2, r1
 80050e2:	71fb      	strb	r3, [r7, #7]
 80050e4:	4613      	mov	r3, r2
 80050e6:	71bb      	strb	r3, [r7, #6]
    if (xRxEnable == FALSE)
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d105      	bne.n	80050fa <vMBPortSerialEnable+0x22>
    {
      HAL_UART_AbortReceive_IT(modbusUart);
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <vMBPortSerialEnable+0x64>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe f97e 	bl	80033f4 <HAL_UART_AbortReceive_IT>
 80050f8:	e008      	b.n	800510c <vMBPortSerialEnable+0x34>
    }
    else
    {
      LTC2870_RX485_En_Rx();
 80050fa:	f7fb ffe3 	bl	80010c4 <LTC2870_RX485_En_Rx>
      HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <vMBPortSerialEnable+0x64>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	490e      	ldr	r1, [pc, #56]	; (8005140 <vMBPortSerialEnable+0x68>)
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe f8d0 	bl	80032ac <HAL_UART_Receive_IT>
    }
    if (xTxEnable == FALSE)
 800510c:	79bb      	ldrb	r3, [r7, #6]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d105      	bne.n	800511e <vMBPortSerialEnable+0x46>
    {
      HAL_UART_AbortTransmit_IT(modbusUart);
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <vMBPortSerialEnable+0x64>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe f8f8 	bl	800330c <HAL_UART_AbortTransmit_IT>
      if (modbusUart->gState == HAL_UART_STATE_READY)
      {
        prvvUARTTxReadyISR();
      }
    }
}
 800511c:	e00a      	b.n	8005134 <vMBPortSerialEnable+0x5c>
      LTC2870_RX485_En_Tx();
 800511e:	f7fb ffe5 	bl	80010ec <LTC2870_RX485_En_Tx>
      if (modbusUart->gState == HAL_UART_STATE_READY)
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <vMBPortSerialEnable+0x64>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b20      	cmp	r3, #32
 800512e:	d101      	bne.n	8005134 <vMBPortSerialEnable+0x5c>
        prvvUARTTxReadyISR();
 8005130:	f000 f84c 	bl	80051cc <prvvUARTTxReadyISR>
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	200002a0 	.word	0x200002a0
 8005140:	200002ab 	.word	0x200002ab

08005144 <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6039      	str	r1, [r7, #0]
 800514c:	4611      	mov	r1, r2
 800514e:	461a      	mov	r2, r3
 8005150:	4603      	mov	r3, r0
 8005152:	71fb      	strb	r3, [r7, #7]
 8005154:	460b      	mov	r3, r1
 8005156:	71bb      	strb	r3, [r7, #6]
 8005158:	4613      	mov	r3, r2
 800515a:	717b      	strb	r3, [r7, #5]
    return TRUE;
 800515c:	2301      	movs	r3, #1
}
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
    txByte = ucByte;
 8005176:	4a07      	ldr	r2, [pc, #28]	; (8005194 <xMBPortSerialPutByte+0x28>)
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	7013      	strb	r3, [r2, #0]
    HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <xMBPortSerialPutByte+0x2c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	4904      	ldr	r1, [pc, #16]	; (8005194 <xMBPortSerialPutByte+0x28>)
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe f84c 	bl	8003222 <HAL_UART_Transmit_IT>
    return TRUE;
 800518a:	2301      	movs	r3, #1
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	200002aa 	.word	0x200002aa
 8005198:	200002a0 	.word	0x200002a0

0800519c <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    *pucByte = rxByte;
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <xMBPortSerialGetByte+0x28>)
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <xMBPortSerialGetByte+0x2c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <xMBPortSerialGetByte+0x28>)
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe f879 	bl	80032ac <HAL_UART_Receive_IT>
    return TRUE;
 80051ba:	2301      	movs	r3, #1
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200002ab 	.word	0x200002ab
 80051c8:	200002a0 	.word	0x200002a0

080051cc <prvvUARTTxReadyISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
static void prvvUARTTxReadyISR( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
    pxMBFrameCBTransmitterEmpty(  );
 80051d0:	4b02      	ldr	r3, [pc, #8]	; (80051dc <prvvUARTTxReadyISR+0x10>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4798      	blx	r3
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000288 	.word	0x20000288

080051e0 <prvvUARTRxISR>:
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
static void prvvUARTRxISR( void )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
    pxMBFrameCBByteReceived(  );
 80051e4:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <prvvUARTRxISR+0x10>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4798      	blx	r3
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000284 	.word	0x20000284

080051f4 <HAL_UART_TxCpltCallback_modbus>:

/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback_modbus(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_UART_TxCpltCallback_modbus+0x24>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d101      	bne.n	800520e <HAL_UART_TxCpltCallback_modbus+0x1a>
  {
      prvvUARTTxReadyISR();
 800520a:	f7ff ffdf 	bl	80051cc <prvvUARTTxReadyISR>
  }
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200002a0 	.word	0x200002a0

0800521c <HAL_UART_RxCpltCallback_modbus>:
/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback_modbus(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if (huart->Instance == modbusUart->Instance)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_UART_RxCpltCallback_modbus+0x24>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d101      	bne.n	8005236 <HAL_UART_RxCpltCallback_modbus+0x1a>
  {
      prvvUARTRxISR();
 8005232:	f7ff ffd5 	bl	80051e0 <prvvUARTRxISR>
  }
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200002a0 	.word	0x200002a0

08005244 <xMBPortTimersInit>:
uint16_t timerCounter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	80fb      	strh	r3, [r7, #6]
    timerPeriod = usTim1Timerout50us;
 800524e:	4a05      	ldr	r2, [pc, #20]	; (8005264 <xMBPortTimersInit+0x20>)
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	8013      	strh	r3, [r2, #0]
    return TRUE;
 8005254:	2301      	movs	r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	200002ac 	.word	0x200002ac

08005268 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
    timerCounter = 0;
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <vMBPortTimersEnable+0x18>)
 800526e:	2200      	movs	r2, #0
 8005270:	801a      	strh	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(modbusTimer);
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <vMBPortTimersEnable+0x1c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd fb26 	bl	80028c8 <HAL_TIM_Base_Start_IT>
}
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200002ae 	.word	0x200002ae
 8005284:	200002a4 	.word	0x200002a4

08005288 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(modbusTimer);
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <vMBPortTimersDisable+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f7fd fb89 	bl	80029a8 <HAL_TIM_Base_Stop_IT>
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200002a4 	.word	0x200002a4

080052a0 <prvvTIMERExpiredISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
static void prvvTIMERExpiredISR( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
    (void)pxMBPortCBTimerExpired();
 80052a4:	4b02      	ldr	r3, [pc, #8]	; (80052b0 <prvvTIMERExpiredISR+0x10>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4798      	blx	r3
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	2000028c 	.word	0x2000028c

080052b4 <HAL_TIM_PeriodElapsedCallback_Modbus>:

/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback_Modbus(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == modbusTimer->Instance)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_TIM_PeriodElapsedCallback_Modbus+0x3c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d10d      	bne.n	80052e6 <HAL_TIM_PeriodElapsedCallback_Modbus+0x32>
    {
        timerCounter++;
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <HAL_TIM_PeriodElapsedCallback_Modbus+0x40>)
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_TIM_PeriodElapsedCallback_Modbus+0x40>)
 80052d4:	801a      	strh	r2, [r3, #0]
        if (timerCounter == timerPeriod)
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <HAL_TIM_PeriodElapsedCallback_Modbus+0x40>)
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <HAL_TIM_PeriodElapsedCallback_Modbus+0x44>)
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_PeriodElapsedCallback_Modbus+0x32>
        {
            prvvTIMERExpiredISR();
 80052e2:	f7ff ffdd 	bl	80052a0 <prvvTIMERExpiredISR>
        }
    }
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200002a4 	.word	0x200002a4
 80052f4:	200002ae 	.word	0x200002ae
 80052f8:	200002ac 	.word	0x200002ac

080052fc <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8005308:	23ff      	movs	r3, #255	; 0xff
 800530a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800530c:	23ff      	movs	r3, #255	; 0xff
 800530e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8005310:	e013      	b.n	800533a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	4053      	eors	r3, r2
 800531e:	b2db      	uxtb	r3, r3
 8005320:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8005322:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <usMBCRC16+0x64>)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4413      	add	r3, r2
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	4053      	eors	r3, r2
 800532e:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8005330:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <usMBCRC16+0x68>)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	807a      	strh	r2, [r7, #2]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	b21a      	sxth	r2, r3
 800534a:	7bbb      	ldrb	r3, [r7, #14]
 800534c:	b21b      	sxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b21b      	sxth	r3, r3
 8005352:	b29b      	uxth	r3, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	08006820 	.word	0x08006820
 8005364:	08006920 	.word	0x08006920

08005368 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	603a      	str	r2, [r7, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
 8005376:	460b      	mov	r3, r1
 8005378:	71bb      	strb	r3, [r7, #6]
 800537a:	4613      	mov	r3, r2
 800537c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8005382:	f7ff fe23 	bl	8004fcc <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8005386:	797b      	ldrb	r3, [r7, #5]
 8005388:	79b8      	ldrb	r0, [r7, #6]
 800538a:	2208      	movs	r2, #8
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	f7ff fed9 	bl	8005144 <xMBPortSerialInit>
 8005392:	4603      	mov	r3, r0
 8005394:	2b01      	cmp	r3, #1
 8005396:	d002      	beq.n	800539e <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8005398:	2303      	movs	r3, #3
 800539a:	73fb      	strb	r3, [r7, #15]
 800539c:	e016      	b.n	80053cc <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80053a4:	d902      	bls.n	80053ac <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80053a6:	2323      	movs	r3, #35	; 0x23
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	e005      	b.n	80053b8 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <eMBRTUInit+0x74>)
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ff41 	bl	8005244 <xMBPortTimersInit>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80053c8:	2303      	movs	r3, #3
 80053ca:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80053cc:	f7ff fe0e 	bl	8004fec <ExitCriticalSection>

    return eStatus;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	00177fa0 	.word	0x00177fa0

080053e0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80053e4:	f7ff fdf2 	bl	8004fcc <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <eMBRTUStart+0x24>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80053ee:	2100      	movs	r1, #0
 80053f0:	2001      	movs	r0, #1
 80053f2:	f7ff fe71 	bl	80050d8 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80053f6:	f7ff ff37 	bl	8005268 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 80053fa:	f7ff fdf7 	bl	8004fec <ExitCriticalSection>
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200002b1 	.word	0x200002b1

08005408 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800540c:	f7ff fdde 	bl	8004fcc <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8005410:	2100      	movs	r1, #0
 8005412:	2000      	movs	r0, #0
 8005414:	f7ff fe60 	bl	80050d8 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8005418:	f7ff ff36 	bl	8005288 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800541c:	f7ff fde6 	bl	8004fec <ExitCriticalSection>
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}

08005424 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005430:	2300      	movs	r3, #0
 8005432:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8005434:	f7ff fdca 	bl	8004fcc <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <eMBRTUReceive+0x7c>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	2bff      	cmp	r3, #255	; 0xff
 8005440:	d905      	bls.n	800544e <eMBRTUReceive+0x2a>
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <eMBRTUReceive+0x80>)
 8005444:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <eMBRTUReceive+0x84>)
 8005446:	219b      	movs	r1, #155	; 0x9b
 8005448:	4818      	ldr	r0, [pc, #96]	; (80054ac <eMBRTUReceive+0x88>)
 800544a:	f000 f99f 	bl	800578c <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <eMBRTUReceive+0x7c>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b03      	cmp	r3, #3
 8005456:	d919      	bls.n	800548c <eMBRTUReceive+0x68>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <eMBRTUReceive+0x7c>)
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	4619      	mov	r1, r3
 8005460:	4813      	ldr	r0, [pc, #76]	; (80054b0 <eMBRTUReceive+0x8c>)
 8005462:	f7ff ff4b 	bl	80052fc <usMBCRC16>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <eMBRTUReceive+0x68>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <eMBRTUReceive+0x8c>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <eMBRTUReceive+0x7c>)
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b03      	subs	r3, #3
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a0b      	ldr	r2, [pc, #44]	; (80054b4 <eMBRTUReceive+0x90>)
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e001      	b.n	8005490 <eMBRTUReceive+0x6c>
    }
    else
    {
        eStatus = MB_EIO;
 800548c:	2305      	movs	r3, #5
 800548e:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8005490:	f7ff fdac 	bl	8004fec <ExitCriticalSection>
    return eStatus;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	200003ba 	.word	0x200003ba
 80054a4:	08006714 	.word	0x08006714
 80054a8:	08006a20 	.word	0x08006a20
 80054ac:	0800673c 	.word	0x0800673c
 80054b0:	200002b4 	.word	0x200002b4
 80054b4:	200002b5 	.word	0x200002b5

080054b8 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80054cc:	f7ff fd7e 	bl	8004fcc <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80054d0:	4b26      	ldr	r3, [pc, #152]	; (800556c <eMBRTUSend+0xb4>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d13f      	bne.n	800555a <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <eMBRTUSend+0xb8>)
 80054e0:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <eMBRTUSend+0xbc>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80054e8:	4b21      	ldr	r3, [pc, #132]	; (8005570 <eMBRTUSend+0xb8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	79fa      	ldrb	r2, [r7, #7]
 80054ee:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 80054f0:	4b20      	ldr	r3, [pc, #128]	; (8005574 <eMBRTUSend+0xbc>)
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	88bb      	ldrh	r3, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <eMBRTUSend+0xbc>)
 80054fe:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <eMBRTUSend+0xb8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <eMBRTUSend+0xbc>)
 8005506:	8812      	ldrh	r2, [r2, #0]
 8005508:	b292      	uxth	r2, r2
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fef5 	bl	80052fc <usMBCRC16>
 8005512:	4603      	mov	r3, r0
 8005514:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <eMBRTUSend+0xbc>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	b291      	uxth	r1, r2
 8005520:	4a14      	ldr	r2, [pc, #80]	; (8005574 <eMBRTUSend+0xbc>)
 8005522:	8011      	strh	r1, [r2, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	89bb      	ldrh	r3, [r7, #12]
 8005528:	b2d9      	uxtb	r1, r3
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <eMBRTUSend+0xc0>)
 800552c:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800552e:	89bb      	ldrh	r3, [r7, #12]
 8005530:	0a1b      	lsrs	r3, r3, #8
 8005532:	b299      	uxth	r1, r3
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <eMBRTUSend+0xbc>)
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	b290      	uxth	r0, r2
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <eMBRTUSend+0xbc>)
 8005540:	8010      	strh	r0, [r2, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	b2c9      	uxtb	r1, r1
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <eMBRTUSend+0xc0>)
 8005548:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <eMBRTUSend+0xc4>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8005550:	2101      	movs	r1, #1
 8005552:	2000      	movs	r0, #0
 8005554:	f7ff fdc0 	bl	80050d8 <vMBPortSerialEnable>
 8005558:	e001      	b.n	800555e <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800555a:	2305      	movs	r3, #5
 800555c:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800555e:	f7ff fd45 	bl	8004fec <ExitCriticalSection>
    return eStatus;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200002b1 	.word	0x200002b1
 8005570:	200003b4 	.word	0x200003b4
 8005574:	200003b8 	.word	0x200003b8
 8005578:	200002b4 	.word	0x200002b4
 800557c:	200002b0 	.word	0x200002b0

08005580 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800558a:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <xMBRTUReceiveFSM+0xb4>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <xMBRTUReceiveFSM+0x20>
 8005594:	4b28      	ldr	r3, [pc, #160]	; (8005638 <xMBRTUReceiveFSM+0xb8>)
 8005596:	4a29      	ldr	r2, [pc, #164]	; (800563c <xMBRTUReceiveFSM+0xbc>)
 8005598:	21e4      	movs	r1, #228	; 0xe4
 800559a:	4829      	ldr	r0, [pc, #164]	; (8005640 <xMBRTUReceiveFSM+0xc0>)
 800559c:	f000 f8f6 	bl	800578c <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80055a0:	1dbb      	adds	r3, r7, #6
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fdfa 	bl	800519c <xMBPortSerialGetByte>

    switch ( eRcvState )
 80055a8:	4b26      	ldr	r3, [pc, #152]	; (8005644 <xMBRTUReceiveFSM+0xc4>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d83b      	bhi.n	800562a <xMBRTUReceiveFSM+0xaa>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <xMBRTUReceiveFSM+0x38>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055d5 	.word	0x080055d5
 80055c0:	080055fd 	.word	0x080055fd
 80055c4:	080055cf 	.word	0x080055cf
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80055c8:	f7ff fe4e 	bl	8005268 <vMBPortTimersEnable>
        break;
 80055cc:	e02d      	b.n	800562a <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80055ce:	f7ff fe4b 	bl	8005268 <vMBPortTimersEnable>
        break;
 80055d2:	e02a      	b.n	800562a <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <xMBRTUReceiveFSM+0xc8>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <xMBRTUReceiveFSM+0xc8>)
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	b291      	uxth	r1, r2
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <xMBRTUReceiveFSM+0xc8>)
 80055e6:	8011      	strh	r1, [r2, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	79b9      	ldrb	r1, [r7, #6]
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <xMBRTUReceiveFSM+0xcc>)
 80055ee:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80055f0:	4b14      	ldr	r3, [pc, #80]	; (8005644 <xMBRTUReceiveFSM+0xc4>)
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80055f6:	f7ff fe37 	bl	8005268 <vMBPortTimersEnable>
        break;
 80055fa:	e016      	b.n	800562a <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80055fc:	4b12      	ldr	r3, [pc, #72]	; (8005648 <xMBRTUReceiveFSM+0xc8>)
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	2bff      	cmp	r3, #255	; 0xff
 8005604:	d80b      	bhi.n	800561e <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <xMBRTUReceiveFSM+0xc8>)
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	b291      	uxth	r1, r2
 8005610:	4a0d      	ldr	r2, [pc, #52]	; (8005648 <xMBRTUReceiveFSM+0xc8>)
 8005612:	8011      	strh	r1, [r2, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	79b9      	ldrb	r1, [r7, #6]
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <xMBRTUReceiveFSM+0xcc>)
 800561a:	5499      	strb	r1, [r3, r2]
 800561c:	e002      	b.n	8005624 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800561e:	4b09      	ldr	r3, [pc, #36]	; (8005644 <xMBRTUReceiveFSM+0xc4>)
 8005620:	2203      	movs	r2, #3
 8005622:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8005624:	f7ff fe20 	bl	8005268 <vMBPortTimersEnable>
        break;
 8005628:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800562a:	79fb      	ldrb	r3, [r7, #7]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200002b0 	.word	0x200002b0
 8005638:	0800675c 	.word	0x0800675c
 800563c:	08006a30 	.word	0x08006a30
 8005640:	0800673c 	.word	0x0800673c
 8005644:	200002b1 	.word	0x200002b1
 8005648:	200003ba 	.word	0x200003ba
 800564c:	200002b4 	.word	0x200002b4

08005650 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800565a:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <xMBRTUTransmitFSM+0x94>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d006      	beq.n	8005672 <xMBRTUTransmitFSM+0x22>
 8005664:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <xMBRTUTransmitFSM+0x98>)
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <xMBRTUTransmitFSM+0x9c>)
 8005668:	f240 111f 	movw	r1, #287	; 0x11f
 800566c:	4820      	ldr	r0, [pc, #128]	; (80056f0 <xMBRTUTransmitFSM+0xa0>)
 800566e:	f000 f88d 	bl	800578c <__assert_func>

    switch ( eSndState )
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <xMBRTUTransmitFSM+0xa4>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <xMBRTUTransmitFSM+0x32>
 800567c:	2b01      	cmp	r3, #1
 800567e:	d005      	beq.n	800568c <xMBRTUTransmitFSM+0x3c>
 8005680:	e02a      	b.n	80056d8 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8005682:	2100      	movs	r1, #0
 8005684:	2001      	movs	r0, #1
 8005686:	f7ff fd27 	bl	80050d8 <vMBPortSerialEnable>
        break;
 800568a:	e025      	b.n	80056d8 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <xMBRTUTransmitFSM+0xa8>)
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <xMBRTUTransmitFSM+0xac>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fd64 	bl	800516c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80056a4:	4b15      	ldr	r3, [pc, #84]	; (80056fc <xMBRTUTransmitFSM+0xac>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	4a14      	ldr	r2, [pc, #80]	; (80056fc <xMBRTUTransmitFSM+0xac>)
 80056ac:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <xMBRTUTransmitFSM+0xa8>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <xMBRTUTransmitFSM+0xa8>)
 80056ba:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80056bc:	e00b      	b.n	80056d6 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80056be:	2003      	movs	r0, #3
 80056c0:	f7ff fcd6 	bl	8005070 <xMBPortEventPost>
 80056c4:	4603      	mov	r3, r0
 80056c6:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80056c8:	2100      	movs	r1, #0
 80056ca:	2001      	movs	r0, #1
 80056cc:	f7ff fd04 	bl	80050d8 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <xMBRTUTransmitFSM+0xa4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
        break;
 80056d6:	bf00      	nop
    }

    return xNeedPoll;
 80056d8:	79fb      	ldrb	r3, [r7, #7]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200002b1 	.word	0x200002b1
 80056e8:	08006778 	.word	0x08006778
 80056ec:	08006a44 	.word	0x08006a44
 80056f0:	0800673c 	.word	0x0800673c
 80056f4:	200002b0 	.word	0x200002b0
 80056f8:	200003b8 	.word	0x200003b8
 80056fc:	200003b4 	.word	0x200003b4

08005700 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8005706:	2300      	movs	r3, #0
 8005708:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800570a:	4b1c      	ldr	r3, [pc, #112]	; (800577c <xMBRTUTimerT35Expired+0x7c>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b03      	cmp	r3, #3
 8005712:	d028      	beq.n	8005766 <xMBRTUTimerT35Expired+0x66>
 8005714:	2b03      	cmp	r3, #3
 8005716:	dc10      	bgt.n	800573a <xMBRTUTimerT35Expired+0x3a>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <xMBRTUTimerT35Expired+0x22>
 800571c:	2b02      	cmp	r3, #2
 800571e:	d006      	beq.n	800572e <xMBRTUTimerT35Expired+0x2e>
 8005720:	e00b      	b.n	800573a <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8005722:	2000      	movs	r0, #0
 8005724:	f7ff fca4 	bl	8005070 <xMBPortEventPost>
 8005728:	4603      	mov	r3, r0
 800572a:	71fb      	strb	r3, [r7, #7]
        break;
 800572c:	e01c      	b.n	8005768 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800572e:	2001      	movs	r0, #1
 8005730:	f7ff fc9e 	bl	8005070 <xMBPortEventPost>
 8005734:	4603      	mov	r3, r0
 8005736:	71fb      	strb	r3, [r7, #7]
        break;
 8005738:	e016      	b.n	8005768 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <xMBRTUTimerT35Expired+0x7c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d011      	beq.n	8005768 <xMBRTUTimerT35Expired+0x68>
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <xMBRTUTimerT35Expired+0x7c>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d00c      	beq.n	8005768 <xMBRTUTimerT35Expired+0x68>
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <xMBRTUTimerT35Expired+0x7c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b03      	cmp	r3, #3
 8005756:	d007      	beq.n	8005768 <xMBRTUTimerT35Expired+0x68>
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <xMBRTUTimerT35Expired+0x80>)
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <xMBRTUTimerT35Expired+0x84>)
 800575c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005760:	4809      	ldr	r0, [pc, #36]	; (8005788 <xMBRTUTimerT35Expired+0x88>)
 8005762:	f000 f813 	bl	800578c <__assert_func>
        break;
 8005766:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8005768:	f7ff fd8e 	bl	8005288 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <xMBRTUTimerT35Expired+0x7c>)
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8005772:	79fb      	ldrb	r3, [r7, #7]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200002b1 	.word	0x200002b1
 8005780:	08006794 	.word	0x08006794
 8005784:	08006a58 	.word	0x08006a58
 8005788:	0800673c 	.word	0x0800673c

0800578c <__assert_func>:
 800578c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800578e:	4614      	mov	r4, r2
 8005790:	461a      	mov	r2, r3
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <__assert_func+0x2c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4605      	mov	r5, r0
 8005798:	68d8      	ldr	r0, [r3, #12]
 800579a:	b14c      	cbz	r4, 80057b0 <__assert_func+0x24>
 800579c:	4b07      	ldr	r3, [pc, #28]	; (80057bc <__assert_func+0x30>)
 800579e:	9100      	str	r1, [sp, #0]
 80057a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057a4:	4906      	ldr	r1, [pc, #24]	; (80057c0 <__assert_func+0x34>)
 80057a6:	462b      	mov	r3, r5
 80057a8:	f000 f8a0 	bl	80058ec <fiprintf>
 80057ac:	f000 f99a 	bl	8005ae4 <abort>
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <__assert_func+0x38>)
 80057b2:	461c      	mov	r4, r3
 80057b4:	e7f3      	b.n	800579e <__assert_func+0x12>
 80057b6:	bf00      	nop
 80057b8:	200000f4 	.word	0x200000f4
 80057bc:	08006a6e 	.word	0x08006a6e
 80057c0:	08006a7b 	.word	0x08006a7b
 80057c4:	08006aa9 	.word	0x08006aa9

080057c8 <std>:
 80057c8:	2300      	movs	r3, #0
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	e9c0 3300 	strd	r3, r3, [r0]
 80057d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057d6:	6083      	str	r3, [r0, #8]
 80057d8:	8181      	strh	r1, [r0, #12]
 80057da:	6643      	str	r3, [r0, #100]	; 0x64
 80057dc:	81c2      	strh	r2, [r0, #14]
 80057de:	6183      	str	r3, [r0, #24]
 80057e0:	4619      	mov	r1, r3
 80057e2:	2208      	movs	r2, #8
 80057e4:	305c      	adds	r0, #92	; 0x5c
 80057e6:	f000 f8f4 	bl	80059d2 <memset>
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <std+0x38>)
 80057ec:	6263      	str	r3, [r4, #36]	; 0x24
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <std+0x3c>)
 80057f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <std+0x40>)
 80057f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std+0x44>)
 80057f8:	6224      	str	r4, [r4, #32]
 80057fa:	6323      	str	r3, [r4, #48]	; 0x30
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	0800594d 	.word	0x0800594d
 8005804:	0800596f 	.word	0x0800596f
 8005808:	080059a7 	.word	0x080059a7
 800580c:	080059cb 	.word	0x080059cb

08005810 <stdio_exit_handler>:
 8005810:	4a02      	ldr	r2, [pc, #8]	; (800581c <stdio_exit_handler+0xc>)
 8005812:	4903      	ldr	r1, [pc, #12]	; (8005820 <stdio_exit_handler+0x10>)
 8005814:	4803      	ldr	r0, [pc, #12]	; (8005824 <stdio_exit_handler+0x14>)
 8005816:	f000 b87b 	b.w	8005910 <_fwalk_sglue>
 800581a:	bf00      	nop
 800581c:	2000009c 	.word	0x2000009c
 8005820:	08006399 	.word	0x08006399
 8005824:	200000a8 	.word	0x200000a8

08005828 <cleanup_stdio>:
 8005828:	6841      	ldr	r1, [r0, #4]
 800582a:	4b0c      	ldr	r3, [pc, #48]	; (800585c <cleanup_stdio+0x34>)
 800582c:	4299      	cmp	r1, r3
 800582e:	b510      	push	{r4, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	d001      	beq.n	8005838 <cleanup_stdio+0x10>
 8005834:	f000 fdb0 	bl	8006398 <_fflush_r>
 8005838:	68a1      	ldr	r1, [r4, #8]
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <cleanup_stdio+0x38>)
 800583c:	4299      	cmp	r1, r3
 800583e:	d002      	beq.n	8005846 <cleanup_stdio+0x1e>
 8005840:	4620      	mov	r0, r4
 8005842:	f000 fda9 	bl	8006398 <_fflush_r>
 8005846:	68e1      	ldr	r1, [r4, #12]
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <cleanup_stdio+0x3c>)
 800584a:	4299      	cmp	r1, r3
 800584c:	d004      	beq.n	8005858 <cleanup_stdio+0x30>
 800584e:	4620      	mov	r0, r4
 8005850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005854:	f000 bda0 	b.w	8006398 <_fflush_r>
 8005858:	bd10      	pop	{r4, pc}
 800585a:	bf00      	nop
 800585c:	200003bc 	.word	0x200003bc
 8005860:	20000424 	.word	0x20000424
 8005864:	2000048c 	.word	0x2000048c

08005868 <global_stdio_init.part.0>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <global_stdio_init.part.0+0x30>)
 800586c:	4c0b      	ldr	r4, [pc, #44]	; (800589c <global_stdio_init.part.0+0x34>)
 800586e:	4a0c      	ldr	r2, [pc, #48]	; (80058a0 <global_stdio_init.part.0+0x38>)
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	4620      	mov	r0, r4
 8005874:	2200      	movs	r2, #0
 8005876:	2104      	movs	r1, #4
 8005878:	f7ff ffa6 	bl	80057c8 <std>
 800587c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005880:	2201      	movs	r2, #1
 8005882:	2109      	movs	r1, #9
 8005884:	f7ff ffa0 	bl	80057c8 <std>
 8005888:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800588c:	2202      	movs	r2, #2
 800588e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005892:	2112      	movs	r1, #18
 8005894:	f7ff bf98 	b.w	80057c8 <std>
 8005898:	200004f4 	.word	0x200004f4
 800589c:	200003bc 	.word	0x200003bc
 80058a0:	08005811 	.word	0x08005811

080058a4 <__sfp_lock_acquire>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__sfp_lock_acquire+0x8>)
 80058a6:	f000 b90d 	b.w	8005ac4 <__retarget_lock_acquire_recursive>
 80058aa:	bf00      	nop
 80058ac:	200004fd 	.word	0x200004fd

080058b0 <__sfp_lock_release>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__sfp_lock_release+0x8>)
 80058b2:	f000 b908 	b.w	8005ac6 <__retarget_lock_release_recursive>
 80058b6:	bf00      	nop
 80058b8:	200004fd 	.word	0x200004fd

080058bc <__sinit>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4604      	mov	r4, r0
 80058c0:	f7ff fff0 	bl	80058a4 <__sfp_lock_acquire>
 80058c4:	6a23      	ldr	r3, [r4, #32]
 80058c6:	b11b      	cbz	r3, 80058d0 <__sinit+0x14>
 80058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058cc:	f7ff bff0 	b.w	80058b0 <__sfp_lock_release>
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <__sinit+0x28>)
 80058d2:	6223      	str	r3, [r4, #32]
 80058d4:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <__sinit+0x2c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f5      	bne.n	80058c8 <__sinit+0xc>
 80058dc:	f7ff ffc4 	bl	8005868 <global_stdio_init.part.0>
 80058e0:	e7f2      	b.n	80058c8 <__sinit+0xc>
 80058e2:	bf00      	nop
 80058e4:	08005829 	.word	0x08005829
 80058e8:	200004f4 	.word	0x200004f4

080058ec <fiprintf>:
 80058ec:	b40e      	push	{r1, r2, r3}
 80058ee:	b503      	push	{r0, r1, lr}
 80058f0:	4601      	mov	r1, r0
 80058f2:	ab03      	add	r3, sp, #12
 80058f4:	4805      	ldr	r0, [pc, #20]	; (800590c <fiprintf+0x20>)
 80058f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f000 fa1b 	bl	8005d38 <_vfiprintf_r>
 8005902:	b002      	add	sp, #8
 8005904:	f85d eb04 	ldr.w	lr, [sp], #4
 8005908:	b003      	add	sp, #12
 800590a:	4770      	bx	lr
 800590c:	200000f4 	.word	0x200000f4

08005910 <_fwalk_sglue>:
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	4607      	mov	r7, r0
 8005916:	4688      	mov	r8, r1
 8005918:	4614      	mov	r4, r2
 800591a:	2600      	movs	r6, #0
 800591c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005920:	f1b9 0901 	subs.w	r9, r9, #1
 8005924:	d505      	bpl.n	8005932 <_fwalk_sglue+0x22>
 8005926:	6824      	ldr	r4, [r4, #0]
 8005928:	2c00      	cmp	r4, #0
 800592a:	d1f7      	bne.n	800591c <_fwalk_sglue+0xc>
 800592c:	4630      	mov	r0, r6
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d907      	bls.n	8005948 <_fwalk_sglue+0x38>
 8005938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800593c:	3301      	adds	r3, #1
 800593e:	d003      	beq.n	8005948 <_fwalk_sglue+0x38>
 8005940:	4629      	mov	r1, r5
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	4306      	orrs	r6, r0
 8005948:	3568      	adds	r5, #104	; 0x68
 800594a:	e7e9      	b.n	8005920 <_fwalk_sglue+0x10>

0800594c <__sread>:
 800594c:	b510      	push	{r4, lr}
 800594e:	460c      	mov	r4, r1
 8005950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005954:	f000 f868 	bl	8005a28 <_read_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	bfab      	itete	ge
 800595c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800595e:	89a3      	ldrhlt	r3, [r4, #12]
 8005960:	181b      	addge	r3, r3, r0
 8005962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005966:	bfac      	ite	ge
 8005968:	6563      	strge	r3, [r4, #84]	; 0x54
 800596a:	81a3      	strhlt	r3, [r4, #12]
 800596c:	bd10      	pop	{r4, pc}

0800596e <__swrite>:
 800596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005972:	461f      	mov	r7, r3
 8005974:	898b      	ldrh	r3, [r1, #12]
 8005976:	05db      	lsls	r3, r3, #23
 8005978:	4605      	mov	r5, r0
 800597a:	460c      	mov	r4, r1
 800597c:	4616      	mov	r6, r2
 800597e:	d505      	bpl.n	800598c <__swrite+0x1e>
 8005980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005984:	2302      	movs	r3, #2
 8005986:	2200      	movs	r2, #0
 8005988:	f000 f83c 	bl	8005a04 <_lseek_r>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	4628      	mov	r0, r5
 800599e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059a2:	f000 b853 	b.w	8005a4c <_write_r>

080059a6 <__sseek>:
 80059a6:	b510      	push	{r4, lr}
 80059a8:	460c      	mov	r4, r1
 80059aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ae:	f000 f829 	bl	8005a04 <_lseek_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	bf15      	itete	ne
 80059b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80059ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059c2:	81a3      	strheq	r3, [r4, #12]
 80059c4:	bf18      	it	ne
 80059c6:	81a3      	strhne	r3, [r4, #12]
 80059c8:	bd10      	pop	{r4, pc}

080059ca <__sclose>:
 80059ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ce:	f000 b809 	b.w	80059e4 <_close_r>

080059d2 <memset>:
 80059d2:	4402      	add	r2, r0
 80059d4:	4603      	mov	r3, r0
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d100      	bne.n	80059dc <memset+0xa>
 80059da:	4770      	bx	lr
 80059dc:	f803 1b01 	strb.w	r1, [r3], #1
 80059e0:	e7f9      	b.n	80059d6 <memset+0x4>
	...

080059e4 <_close_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d06      	ldr	r5, [pc, #24]	; (8005a00 <_close_r+0x1c>)
 80059e8:	2300      	movs	r3, #0
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	f7fb fd41 	bl	8001476 <_close>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d102      	bne.n	80059fe <_close_r+0x1a>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b103      	cbz	r3, 80059fe <_close_r+0x1a>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	200004f8 	.word	0x200004f8

08005a04 <_lseek_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4d07      	ldr	r5, [pc, #28]	; (8005a24 <_lseek_r+0x20>)
 8005a08:	4604      	mov	r4, r0
 8005a0a:	4608      	mov	r0, r1
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	602a      	str	r2, [r5, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f7fb fd56 	bl	80014c4 <_lseek>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_lseek_r+0x1e>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_lseek_r+0x1e>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	200004f8 	.word	0x200004f8

08005a28 <_read_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d07      	ldr	r5, [pc, #28]	; (8005a48 <_read_r+0x20>)
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	4608      	mov	r0, r1
 8005a30:	4611      	mov	r1, r2
 8005a32:	2200      	movs	r2, #0
 8005a34:	602a      	str	r2, [r5, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f7fb fce4 	bl	8001404 <_read>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_read_r+0x1e>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_read_r+0x1e>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	200004f8 	.word	0x200004f8

08005a4c <_write_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4d07      	ldr	r5, [pc, #28]	; (8005a6c <_write_r+0x20>)
 8005a50:	4604      	mov	r4, r0
 8005a52:	4608      	mov	r0, r1
 8005a54:	4611      	mov	r1, r2
 8005a56:	2200      	movs	r2, #0
 8005a58:	602a      	str	r2, [r5, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f7fb fcef 	bl	800143e <_write>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_write_r+0x1e>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_write_r+0x1e>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	200004f8 	.word	0x200004f8

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	; (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	200000f4 	.word	0x200000f4

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	; (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	; (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	; (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f000 fe18 	bl	80066c4 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	08006ae8 	.word	0x08006ae8
 8005ab8:	08006ae8 	.word	0x08006ae8
 8005abc:	08006ae8 	.word	0x08006ae8
 8005ac0:	08006aec 	.word	0x08006aec

08005ac4 <__retarget_lock_acquire_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <__retarget_lock_release_recursive>:
 8005ac6:	4770      	bx	lr

08005ac8 <memcpy>:
 8005ac8:	440a      	add	r2, r1
 8005aca:	4291      	cmp	r1, r2
 8005acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xc>
 8005ad2:	4770      	bx	lr
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ade:	4291      	cmp	r1, r2
 8005ae0:	d1f9      	bne.n	8005ad6 <memcpy+0xe>
 8005ae2:	bd10      	pop	{r4, pc}

08005ae4 <abort>:
 8005ae4:	b508      	push	{r3, lr}
 8005ae6:	2006      	movs	r0, #6
 8005ae8:	f000 fd3c 	bl	8006564 <raise>
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7fb fc7f 	bl	80013f0 <_exit>
	...

08005af4 <_free_r>:
 8005af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005af6:	2900      	cmp	r1, #0
 8005af8:	d044      	beq.n	8005b84 <_free_r+0x90>
 8005afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005afe:	9001      	str	r0, [sp, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f1a1 0404 	sub.w	r4, r1, #4
 8005b06:	bfb8      	it	lt
 8005b08:	18e4      	addlt	r4, r4, r3
 8005b0a:	f000 f8df 	bl	8005ccc <__malloc_lock>
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <_free_r+0x94>)
 8005b10:	9801      	ldr	r0, [sp, #4]
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	b933      	cbnz	r3, 8005b24 <_free_r+0x30>
 8005b16:	6063      	str	r3, [r4, #4]
 8005b18:	6014      	str	r4, [r2, #0]
 8005b1a:	b003      	add	sp, #12
 8005b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b20:	f000 b8da 	b.w	8005cd8 <__malloc_unlock>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d908      	bls.n	8005b3a <_free_r+0x46>
 8005b28:	6825      	ldr	r5, [r4, #0]
 8005b2a:	1961      	adds	r1, r4, r5
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	bf01      	itttt	eq
 8005b30:	6819      	ldreq	r1, [r3, #0]
 8005b32:	685b      	ldreq	r3, [r3, #4]
 8005b34:	1949      	addeq	r1, r1, r5
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	e7ed      	b.n	8005b16 <_free_r+0x22>
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b10b      	cbz	r3, 8005b44 <_free_r+0x50>
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	d9fa      	bls.n	8005b3a <_free_r+0x46>
 8005b44:	6811      	ldr	r1, [r2, #0]
 8005b46:	1855      	adds	r5, r2, r1
 8005b48:	42a5      	cmp	r5, r4
 8005b4a:	d10b      	bne.n	8005b64 <_free_r+0x70>
 8005b4c:	6824      	ldr	r4, [r4, #0]
 8005b4e:	4421      	add	r1, r4
 8005b50:	1854      	adds	r4, r2, r1
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	6011      	str	r1, [r2, #0]
 8005b56:	d1e0      	bne.n	8005b1a <_free_r+0x26>
 8005b58:	681c      	ldr	r4, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	6053      	str	r3, [r2, #4]
 8005b5e:	440c      	add	r4, r1
 8005b60:	6014      	str	r4, [r2, #0]
 8005b62:	e7da      	b.n	8005b1a <_free_r+0x26>
 8005b64:	d902      	bls.n	8005b6c <_free_r+0x78>
 8005b66:	230c      	movs	r3, #12
 8005b68:	6003      	str	r3, [r0, #0]
 8005b6a:	e7d6      	b.n	8005b1a <_free_r+0x26>
 8005b6c:	6825      	ldr	r5, [r4, #0]
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	428b      	cmp	r3, r1
 8005b72:	bf04      	itt	eq
 8005b74:	6819      	ldreq	r1, [r3, #0]
 8005b76:	685b      	ldreq	r3, [r3, #4]
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	bf04      	itt	eq
 8005b7c:	1949      	addeq	r1, r1, r5
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	6054      	str	r4, [r2, #4]
 8005b82:	e7ca      	b.n	8005b1a <_free_r+0x26>
 8005b84:	b003      	add	sp, #12
 8005b86:	bd30      	pop	{r4, r5, pc}
 8005b88:	20000500 	.word	0x20000500

08005b8c <sbrk_aligned>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4e0e      	ldr	r6, [pc, #56]	; (8005bc8 <sbrk_aligned+0x3c>)
 8005b90:	460c      	mov	r4, r1
 8005b92:	6831      	ldr	r1, [r6, #0]
 8005b94:	4605      	mov	r5, r0
 8005b96:	b911      	cbnz	r1, 8005b9e <sbrk_aligned+0x12>
 8005b98:	f000 fd00 	bl	800659c <_sbrk_r>
 8005b9c:	6030      	str	r0, [r6, #0]
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 fcfb 	bl	800659c <_sbrk_r>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d00a      	beq.n	8005bc0 <sbrk_aligned+0x34>
 8005baa:	1cc4      	adds	r4, r0, #3
 8005bac:	f024 0403 	bic.w	r4, r4, #3
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d007      	beq.n	8005bc4 <sbrk_aligned+0x38>
 8005bb4:	1a21      	subs	r1, r4, r0
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 fcf0 	bl	800659c <_sbrk_r>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d101      	bne.n	8005bc4 <sbrk_aligned+0x38>
 8005bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	20000504 	.word	0x20000504

08005bcc <_malloc_r>:
 8005bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd0:	1ccd      	adds	r5, r1, #3
 8005bd2:	f025 0503 	bic.w	r5, r5, #3
 8005bd6:	3508      	adds	r5, #8
 8005bd8:	2d0c      	cmp	r5, #12
 8005bda:	bf38      	it	cc
 8005bdc:	250c      	movcc	r5, #12
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	4607      	mov	r7, r0
 8005be2:	db01      	blt.n	8005be8 <_malloc_r+0x1c>
 8005be4:	42a9      	cmp	r1, r5
 8005be6:	d905      	bls.n	8005bf4 <_malloc_r+0x28>
 8005be8:	230c      	movs	r3, #12
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	2600      	movs	r6, #0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cc8 <_malloc_r+0xfc>
 8005bf8:	f000 f868 	bl	8005ccc <__malloc_lock>
 8005bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8005c00:	461c      	mov	r4, r3
 8005c02:	bb5c      	cbnz	r4, 8005c5c <_malloc_r+0x90>
 8005c04:	4629      	mov	r1, r5
 8005c06:	4638      	mov	r0, r7
 8005c08:	f7ff ffc0 	bl	8005b8c <sbrk_aligned>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	4604      	mov	r4, r0
 8005c10:	d155      	bne.n	8005cbe <_malloc_r+0xf2>
 8005c12:	f8d8 4000 	ldr.w	r4, [r8]
 8005c16:	4626      	mov	r6, r4
 8005c18:	2e00      	cmp	r6, #0
 8005c1a:	d145      	bne.n	8005ca8 <_malloc_r+0xdc>
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	d048      	beq.n	8005cb2 <_malloc_r+0xe6>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	4631      	mov	r1, r6
 8005c24:	4638      	mov	r0, r7
 8005c26:	eb04 0903 	add.w	r9, r4, r3
 8005c2a:	f000 fcb7 	bl	800659c <_sbrk_r>
 8005c2e:	4581      	cmp	r9, r0
 8005c30:	d13f      	bne.n	8005cb2 <_malloc_r+0xe6>
 8005c32:	6821      	ldr	r1, [r4, #0]
 8005c34:	1a6d      	subs	r5, r5, r1
 8005c36:	4629      	mov	r1, r5
 8005c38:	4638      	mov	r0, r7
 8005c3a:	f7ff ffa7 	bl	8005b8c <sbrk_aligned>
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d037      	beq.n	8005cb2 <_malloc_r+0xe6>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	442b      	add	r3, r5
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	f8d8 3000 	ldr.w	r3, [r8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d038      	beq.n	8005cc2 <_malloc_r+0xf6>
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	42a2      	cmp	r2, r4
 8005c54:	d12b      	bne.n	8005cae <_malloc_r+0xe2>
 8005c56:	2200      	movs	r2, #0
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	e00f      	b.n	8005c7c <_malloc_r+0xb0>
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	1b52      	subs	r2, r2, r5
 8005c60:	d41f      	bmi.n	8005ca2 <_malloc_r+0xd6>
 8005c62:	2a0b      	cmp	r2, #11
 8005c64:	d917      	bls.n	8005c96 <_malloc_r+0xca>
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	6025      	str	r5, [r4, #0]
 8005c6c:	bf18      	it	ne
 8005c6e:	6059      	strne	r1, [r3, #4]
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	bf08      	it	eq
 8005c74:	f8c8 1000 	streq.w	r1, [r8]
 8005c78:	5162      	str	r2, [r4, r5]
 8005c7a:	604b      	str	r3, [r1, #4]
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	f104 060b 	add.w	r6, r4, #11
 8005c82:	f000 f829 	bl	8005cd8 <__malloc_unlock>
 8005c86:	f026 0607 	bic.w	r6, r6, #7
 8005c8a:	1d23      	adds	r3, r4, #4
 8005c8c:	1af2      	subs	r2, r6, r3
 8005c8e:	d0ae      	beq.n	8005bee <_malloc_r+0x22>
 8005c90:	1b9b      	subs	r3, r3, r6
 8005c92:	50a3      	str	r3, [r4, r2]
 8005c94:	e7ab      	b.n	8005bee <_malloc_r+0x22>
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	6862      	ldr	r2, [r4, #4]
 8005c9a:	d1dd      	bne.n	8005c58 <_malloc_r+0x8c>
 8005c9c:	f8c8 2000 	str.w	r2, [r8]
 8005ca0:	e7ec      	b.n	8005c7c <_malloc_r+0xb0>
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	6864      	ldr	r4, [r4, #4]
 8005ca6:	e7ac      	b.n	8005c02 <_malloc_r+0x36>
 8005ca8:	4634      	mov	r4, r6
 8005caa:	6876      	ldr	r6, [r6, #4]
 8005cac:	e7b4      	b.n	8005c18 <_malloc_r+0x4c>
 8005cae:	4613      	mov	r3, r2
 8005cb0:	e7cc      	b.n	8005c4c <_malloc_r+0x80>
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f000 f80e 	bl	8005cd8 <__malloc_unlock>
 8005cbc:	e797      	b.n	8005bee <_malloc_r+0x22>
 8005cbe:	6025      	str	r5, [r4, #0]
 8005cc0:	e7dc      	b.n	8005c7c <_malloc_r+0xb0>
 8005cc2:	605b      	str	r3, [r3, #4]
 8005cc4:	deff      	udf	#255	; 0xff
 8005cc6:	bf00      	nop
 8005cc8:	20000500 	.word	0x20000500

08005ccc <__malloc_lock>:
 8005ccc:	4801      	ldr	r0, [pc, #4]	; (8005cd4 <__malloc_lock+0x8>)
 8005cce:	f7ff bef9 	b.w	8005ac4 <__retarget_lock_acquire_recursive>
 8005cd2:	bf00      	nop
 8005cd4:	200004fc 	.word	0x200004fc

08005cd8 <__malloc_unlock>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	; (8005ce0 <__malloc_unlock+0x8>)
 8005cda:	f7ff bef4 	b.w	8005ac6 <__retarget_lock_release_recursive>
 8005cde:	bf00      	nop
 8005ce0:	200004fc 	.word	0x200004fc

08005ce4 <__sfputc_r>:
 8005ce4:	6893      	ldr	r3, [r2, #8]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	b410      	push	{r4}
 8005cec:	6093      	str	r3, [r2, #8]
 8005cee:	da08      	bge.n	8005d02 <__sfputc_r+0x1e>
 8005cf0:	6994      	ldr	r4, [r2, #24]
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	db01      	blt.n	8005cfa <__sfputc_r+0x16>
 8005cf6:	290a      	cmp	r1, #10
 8005cf8:	d103      	bne.n	8005d02 <__sfputc_r+0x1e>
 8005cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cfe:	f000 bb73 	b.w	80063e8 <__swbuf_r>
 8005d02:	6813      	ldr	r3, [r2, #0]
 8005d04:	1c58      	adds	r0, r3, #1
 8005d06:	6010      	str	r0, [r2, #0]
 8005d08:	7019      	strb	r1, [r3, #0]
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <__sfputs_r>:
 8005d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	18d5      	adds	r5, r2, r3
 8005d1c:	42ac      	cmp	r4, r5
 8005d1e:	d101      	bne.n	8005d24 <__sfputs_r+0x12>
 8005d20:	2000      	movs	r0, #0
 8005d22:	e007      	b.n	8005d34 <__sfputs_r+0x22>
 8005d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d28:	463a      	mov	r2, r7
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff ffda 	bl	8005ce4 <__sfputc_r>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d1f3      	bne.n	8005d1c <__sfputs_r+0xa>
 8005d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d38 <_vfiprintf_r>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	b09d      	sub	sp, #116	; 0x74
 8005d40:	4614      	mov	r4, r2
 8005d42:	4698      	mov	r8, r3
 8005d44:	4606      	mov	r6, r0
 8005d46:	b118      	cbz	r0, 8005d50 <_vfiprintf_r+0x18>
 8005d48:	6a03      	ldr	r3, [r0, #32]
 8005d4a:	b90b      	cbnz	r3, 8005d50 <_vfiprintf_r+0x18>
 8005d4c:	f7ff fdb6 	bl	80058bc <__sinit>
 8005d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d52:	07d9      	lsls	r1, r3, #31
 8005d54:	d405      	bmi.n	8005d62 <_vfiprintf_r+0x2a>
 8005d56:	89ab      	ldrh	r3, [r5, #12]
 8005d58:	059a      	lsls	r2, r3, #22
 8005d5a:	d402      	bmi.n	8005d62 <_vfiprintf_r+0x2a>
 8005d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d5e:	f7ff feb1 	bl	8005ac4 <__retarget_lock_acquire_recursive>
 8005d62:	89ab      	ldrh	r3, [r5, #12]
 8005d64:	071b      	lsls	r3, r3, #28
 8005d66:	d501      	bpl.n	8005d6c <_vfiprintf_r+0x34>
 8005d68:	692b      	ldr	r3, [r5, #16]
 8005d6a:	b99b      	cbnz	r3, 8005d94 <_vfiprintf_r+0x5c>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f000 fb78 	bl	8006464 <__swsetup_r>
 8005d74:	b170      	cbz	r0, 8005d94 <_vfiprintf_r+0x5c>
 8005d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d78:	07dc      	lsls	r4, r3, #31
 8005d7a:	d504      	bpl.n	8005d86 <_vfiprintf_r+0x4e>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	b01d      	add	sp, #116	; 0x74
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	0598      	lsls	r0, r3, #22
 8005d8a:	d4f7      	bmi.n	8005d7c <_vfiprintf_r+0x44>
 8005d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8e:	f7ff fe9a 	bl	8005ac6 <__retarget_lock_release_recursive>
 8005d92:	e7f3      	b.n	8005d7c <_vfiprintf_r+0x44>
 8005d94:	2300      	movs	r3, #0
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	2320      	movs	r3, #32
 8005d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da2:	2330      	movs	r3, #48	; 0x30
 8005da4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005f58 <_vfiprintf_r+0x220>
 8005da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dac:	f04f 0901 	mov.w	r9, #1
 8005db0:	4623      	mov	r3, r4
 8005db2:	469a      	mov	sl, r3
 8005db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005db8:	b10a      	cbz	r2, 8005dbe <_vfiprintf_r+0x86>
 8005dba:	2a25      	cmp	r2, #37	; 0x25
 8005dbc:	d1f9      	bne.n	8005db2 <_vfiprintf_r+0x7a>
 8005dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8005dc2:	d00b      	beq.n	8005ddc <_vfiprintf_r+0xa4>
 8005dc4:	465b      	mov	r3, fp
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff ffa1 	bl	8005d12 <__sfputs_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f000 80a9 	beq.w	8005f28 <_vfiprintf_r+0x1f0>
 8005dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dd8:	445a      	add	r2, fp
 8005dda:	9209      	str	r2, [sp, #36]	; 0x24
 8005ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a1 	beq.w	8005f28 <_vfiprintf_r+0x1f0>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005df0:	f10a 0a01 	add.w	sl, sl, #1
 8005df4:	9304      	str	r3, [sp, #16]
 8005df6:	9307      	str	r3, [sp, #28]
 8005df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dfe:	4654      	mov	r4, sl
 8005e00:	2205      	movs	r2, #5
 8005e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e06:	4854      	ldr	r0, [pc, #336]	; (8005f58 <_vfiprintf_r+0x220>)
 8005e08:	f7fa f9e2 	bl	80001d0 <memchr>
 8005e0c:	9a04      	ldr	r2, [sp, #16]
 8005e0e:	b9d8      	cbnz	r0, 8005e48 <_vfiprintf_r+0x110>
 8005e10:	06d1      	lsls	r1, r2, #27
 8005e12:	bf44      	itt	mi
 8005e14:	2320      	movmi	r3, #32
 8005e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e1a:	0713      	lsls	r3, r2, #28
 8005e1c:	bf44      	itt	mi
 8005e1e:	232b      	movmi	r3, #43	; 0x2b
 8005e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e24:	f89a 3000 	ldrb.w	r3, [sl]
 8005e28:	2b2a      	cmp	r3, #42	; 0x2a
 8005e2a:	d015      	beq.n	8005e58 <_vfiprintf_r+0x120>
 8005e2c:	9a07      	ldr	r2, [sp, #28]
 8005e2e:	4654      	mov	r4, sl
 8005e30:	2000      	movs	r0, #0
 8005e32:	f04f 0c0a 	mov.w	ip, #10
 8005e36:	4621      	mov	r1, r4
 8005e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e3c:	3b30      	subs	r3, #48	; 0x30
 8005e3e:	2b09      	cmp	r3, #9
 8005e40:	d94d      	bls.n	8005ede <_vfiprintf_r+0x1a6>
 8005e42:	b1b0      	cbz	r0, 8005e72 <_vfiprintf_r+0x13a>
 8005e44:	9207      	str	r2, [sp, #28]
 8005e46:	e014      	b.n	8005e72 <_vfiprintf_r+0x13a>
 8005e48:	eba0 0308 	sub.w	r3, r0, r8
 8005e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	46a2      	mov	sl, r4
 8005e56:	e7d2      	b.n	8005dfe <_vfiprintf_r+0xc6>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	1d19      	adds	r1, r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	9103      	str	r1, [sp, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bfbb      	ittet	lt
 8005e64:	425b      	neglt	r3, r3
 8005e66:	f042 0202 	orrlt.w	r2, r2, #2
 8005e6a:	9307      	strge	r3, [sp, #28]
 8005e6c:	9307      	strlt	r3, [sp, #28]
 8005e6e:	bfb8      	it	lt
 8005e70:	9204      	strlt	r2, [sp, #16]
 8005e72:	7823      	ldrb	r3, [r4, #0]
 8005e74:	2b2e      	cmp	r3, #46	; 0x2e
 8005e76:	d10c      	bne.n	8005e92 <_vfiprintf_r+0x15a>
 8005e78:	7863      	ldrb	r3, [r4, #1]
 8005e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7c:	d134      	bne.n	8005ee8 <_vfiprintf_r+0x1b0>
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	9203      	str	r2, [sp, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfb8      	it	lt
 8005e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e8e:	3402      	adds	r4, #2
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f68 <_vfiprintf_r+0x230>
 8005e96:	7821      	ldrb	r1, [r4, #0]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	4650      	mov	r0, sl
 8005e9c:	f7fa f998 	bl	80001d0 <memchr>
 8005ea0:	b138      	cbz	r0, 8005eb2 <_vfiprintf_r+0x17a>
 8005ea2:	9b04      	ldr	r3, [sp, #16]
 8005ea4:	eba0 000a 	sub.w	r0, r0, sl
 8005ea8:	2240      	movs	r2, #64	; 0x40
 8005eaa:	4082      	lsls	r2, r0
 8005eac:	4313      	orrs	r3, r2
 8005eae:	3401      	adds	r4, #1
 8005eb0:	9304      	str	r3, [sp, #16]
 8005eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb6:	4829      	ldr	r0, [pc, #164]	; (8005f5c <_vfiprintf_r+0x224>)
 8005eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ebc:	2206      	movs	r2, #6
 8005ebe:	f7fa f987 	bl	80001d0 <memchr>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d03f      	beq.n	8005f46 <_vfiprintf_r+0x20e>
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <_vfiprintf_r+0x228>)
 8005ec8:	bb1b      	cbnz	r3, 8005f12 <_vfiprintf_r+0x1da>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	3307      	adds	r3, #7
 8005ece:	f023 0307 	bic.w	r3, r3, #7
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	9303      	str	r3, [sp, #12]
 8005ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed8:	443b      	add	r3, r7
 8005eda:	9309      	str	r3, [sp, #36]	; 0x24
 8005edc:	e768      	b.n	8005db0 <_vfiprintf_r+0x78>
 8005ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	e7a6      	b.n	8005e36 <_vfiprintf_r+0xfe>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	3401      	adds	r4, #1
 8005eec:	9305      	str	r3, [sp, #20]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	f04f 0c0a 	mov.w	ip, #10
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005efa:	3a30      	subs	r2, #48	; 0x30
 8005efc:	2a09      	cmp	r2, #9
 8005efe:	d903      	bls.n	8005f08 <_vfiprintf_r+0x1d0>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0c6      	beq.n	8005e92 <_vfiprintf_r+0x15a>
 8005f04:	9105      	str	r1, [sp, #20]
 8005f06:	e7c4      	b.n	8005e92 <_vfiprintf_r+0x15a>
 8005f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e7f0      	b.n	8005ef4 <_vfiprintf_r+0x1bc>
 8005f12:	ab03      	add	r3, sp, #12
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	462a      	mov	r2, r5
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <_vfiprintf_r+0x22c>)
 8005f1a:	a904      	add	r1, sp, #16
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f3af 8000 	nop.w
 8005f22:	4607      	mov	r7, r0
 8005f24:	1c78      	adds	r0, r7, #1
 8005f26:	d1d6      	bne.n	8005ed6 <_vfiprintf_r+0x19e>
 8005f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f2a:	07d9      	lsls	r1, r3, #31
 8005f2c:	d405      	bmi.n	8005f3a <_vfiprintf_r+0x202>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	059a      	lsls	r2, r3, #22
 8005f32:	d402      	bmi.n	8005f3a <_vfiprintf_r+0x202>
 8005f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f36:	f7ff fdc6 	bl	8005ac6 <__retarget_lock_release_recursive>
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	065b      	lsls	r3, r3, #25
 8005f3e:	f53f af1d 	bmi.w	8005d7c <_vfiprintf_r+0x44>
 8005f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f44:	e71c      	b.n	8005d80 <_vfiprintf_r+0x48>
 8005f46:	ab03      	add	r3, sp, #12
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <_vfiprintf_r+0x22c>)
 8005f4e:	a904      	add	r1, sp, #16
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f879 	bl	8006048 <_printf_i>
 8005f56:	e7e4      	b.n	8005f22 <_vfiprintf_r+0x1ea>
 8005f58:	08006aaa 	.word	0x08006aaa
 8005f5c:	08006ab4 	.word	0x08006ab4
 8005f60:	00000000 	.word	0x00000000
 8005f64:	08005d13 	.word	0x08005d13
 8005f68:	08006ab0 	.word	0x08006ab0

08005f6c <_printf_common>:
 8005f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	4616      	mov	r6, r2
 8005f72:	4699      	mov	r9, r3
 8005f74:	688a      	ldr	r2, [r1, #8]
 8005f76:	690b      	ldr	r3, [r1, #16]
 8005f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	bfb8      	it	lt
 8005f80:	4613      	movlt	r3, r2
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f88:	4607      	mov	r7, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	b10a      	cbz	r2, 8005f92 <_printf_common+0x26>
 8005f8e:	3301      	adds	r3, #1
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	0699      	lsls	r1, r3, #26
 8005f96:	bf42      	ittt	mi
 8005f98:	6833      	ldrmi	r3, [r6, #0]
 8005f9a:	3302      	addmi	r3, #2
 8005f9c:	6033      	strmi	r3, [r6, #0]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	f015 0506 	ands.w	r5, r5, #6
 8005fa4:	d106      	bne.n	8005fb4 <_printf_common+0x48>
 8005fa6:	f104 0a19 	add.w	sl, r4, #25
 8005faa:	68e3      	ldr	r3, [r4, #12]
 8005fac:	6832      	ldr	r2, [r6, #0]
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	42ab      	cmp	r3, r5
 8005fb2:	dc26      	bgt.n	8006002 <_printf_common+0x96>
 8005fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fb8:	1e13      	subs	r3, r2, #0
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	bf18      	it	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	0692      	lsls	r2, r2, #26
 8005fc2:	d42b      	bmi.n	800601c <_printf_common+0xb0>
 8005fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4638      	mov	r0, r7
 8005fcc:	47c0      	blx	r8
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d01e      	beq.n	8006010 <_printf_common+0xa4>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	f003 0306 	and.w	r3, r3, #6
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	bf02      	ittt	eq
 8005fde:	68e5      	ldreq	r5, [r4, #12]
 8005fe0:	6833      	ldreq	r3, [r6, #0]
 8005fe2:	1aed      	subeq	r5, r5, r3
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	bf0c      	ite	eq
 8005fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fec:	2500      	movne	r5, #0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	bfc4      	itt	gt
 8005ff2:	1a9b      	subgt	r3, r3, r2
 8005ff4:	18ed      	addgt	r5, r5, r3
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	341a      	adds	r4, #26
 8005ffa:	42b5      	cmp	r5, r6
 8005ffc:	d11a      	bne.n	8006034 <_printf_common+0xc8>
 8005ffe:	2000      	movs	r0, #0
 8006000:	e008      	b.n	8006014 <_printf_common+0xa8>
 8006002:	2301      	movs	r3, #1
 8006004:	4652      	mov	r2, sl
 8006006:	4649      	mov	r1, r9
 8006008:	4638      	mov	r0, r7
 800600a:	47c0      	blx	r8
 800600c:	3001      	adds	r0, #1
 800600e:	d103      	bne.n	8006018 <_printf_common+0xac>
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006018:	3501      	adds	r5, #1
 800601a:	e7c6      	b.n	8005faa <_printf_common+0x3e>
 800601c:	18e1      	adds	r1, r4, r3
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	2030      	movs	r0, #48	; 0x30
 8006022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006026:	4422      	add	r2, r4
 8006028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800602c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006030:	3302      	adds	r3, #2
 8006032:	e7c7      	b.n	8005fc4 <_printf_common+0x58>
 8006034:	2301      	movs	r3, #1
 8006036:	4622      	mov	r2, r4
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	47c0      	blx	r8
 800603e:	3001      	adds	r0, #1
 8006040:	d0e6      	beq.n	8006010 <_printf_common+0xa4>
 8006042:	3601      	adds	r6, #1
 8006044:	e7d9      	b.n	8005ffa <_printf_common+0x8e>
	...

08006048 <_printf_i>:
 8006048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	7e0f      	ldrb	r7, [r1, #24]
 800604e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006050:	2f78      	cmp	r7, #120	; 0x78
 8006052:	4691      	mov	r9, r2
 8006054:	4680      	mov	r8, r0
 8006056:	460c      	mov	r4, r1
 8006058:	469a      	mov	sl, r3
 800605a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800605e:	d807      	bhi.n	8006070 <_printf_i+0x28>
 8006060:	2f62      	cmp	r7, #98	; 0x62
 8006062:	d80a      	bhi.n	800607a <_printf_i+0x32>
 8006064:	2f00      	cmp	r7, #0
 8006066:	f000 80d4 	beq.w	8006212 <_printf_i+0x1ca>
 800606a:	2f58      	cmp	r7, #88	; 0x58
 800606c:	f000 80c0 	beq.w	80061f0 <_printf_i+0x1a8>
 8006070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006078:	e03a      	b.n	80060f0 <_printf_i+0xa8>
 800607a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800607e:	2b15      	cmp	r3, #21
 8006080:	d8f6      	bhi.n	8006070 <_printf_i+0x28>
 8006082:	a101      	add	r1, pc, #4	; (adr r1, 8006088 <_printf_i+0x40>)
 8006084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006088:	080060e1 	.word	0x080060e1
 800608c:	080060f5 	.word	0x080060f5
 8006090:	08006071 	.word	0x08006071
 8006094:	08006071 	.word	0x08006071
 8006098:	08006071 	.word	0x08006071
 800609c:	08006071 	.word	0x08006071
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006071 	.word	0x08006071
 80060a8:	08006071 	.word	0x08006071
 80060ac:	08006071 	.word	0x08006071
 80060b0:	08006071 	.word	0x08006071
 80060b4:	080061f9 	.word	0x080061f9
 80060b8:	08006121 	.word	0x08006121
 80060bc:	080061b3 	.word	0x080061b3
 80060c0:	08006071 	.word	0x08006071
 80060c4:	08006071 	.word	0x08006071
 80060c8:	0800621b 	.word	0x0800621b
 80060cc:	08006071 	.word	0x08006071
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006071 	.word	0x08006071
 80060d8:	08006071 	.word	0x08006071
 80060dc:	080061bb 	.word	0x080061bb
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	602a      	str	r2, [r5, #0]
 80060e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f0:	2301      	movs	r3, #1
 80060f2:	e09f      	b.n	8006234 <_printf_i+0x1ec>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	0607      	lsls	r7, r0, #24
 80060fa:	f103 0104 	add.w	r1, r3, #4
 80060fe:	6029      	str	r1, [r5, #0]
 8006100:	d501      	bpl.n	8006106 <_printf_i+0xbe>
 8006102:	681e      	ldr	r6, [r3, #0]
 8006104:	e003      	b.n	800610e <_printf_i+0xc6>
 8006106:	0646      	lsls	r6, r0, #25
 8006108:	d5fb      	bpl.n	8006102 <_printf_i+0xba>
 800610a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800610e:	2e00      	cmp	r6, #0
 8006110:	da03      	bge.n	800611a <_printf_i+0xd2>
 8006112:	232d      	movs	r3, #45	; 0x2d
 8006114:	4276      	negs	r6, r6
 8006116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800611a:	485a      	ldr	r0, [pc, #360]	; (8006284 <_printf_i+0x23c>)
 800611c:	230a      	movs	r3, #10
 800611e:	e012      	b.n	8006146 <_printf_i+0xfe>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	1d19      	adds	r1, r3, #4
 8006126:	6029      	str	r1, [r5, #0]
 8006128:	0605      	lsls	r5, r0, #24
 800612a:	d501      	bpl.n	8006130 <_printf_i+0xe8>
 800612c:	681e      	ldr	r6, [r3, #0]
 800612e:	e002      	b.n	8006136 <_printf_i+0xee>
 8006130:	0641      	lsls	r1, r0, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0xe4>
 8006134:	881e      	ldrh	r6, [r3, #0]
 8006136:	4853      	ldr	r0, [pc, #332]	; (8006284 <_printf_i+0x23c>)
 8006138:	2f6f      	cmp	r7, #111	; 0x6f
 800613a:	bf0c      	ite	eq
 800613c:	2308      	moveq	r3, #8
 800613e:	230a      	movne	r3, #10
 8006140:	2100      	movs	r1, #0
 8006142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006146:	6865      	ldr	r5, [r4, #4]
 8006148:	60a5      	str	r5, [r4, #8]
 800614a:	2d00      	cmp	r5, #0
 800614c:	bfa2      	ittt	ge
 800614e:	6821      	ldrge	r1, [r4, #0]
 8006150:	f021 0104 	bicge.w	r1, r1, #4
 8006154:	6021      	strge	r1, [r4, #0]
 8006156:	b90e      	cbnz	r6, 800615c <_printf_i+0x114>
 8006158:	2d00      	cmp	r5, #0
 800615a:	d04b      	beq.n	80061f4 <_printf_i+0x1ac>
 800615c:	4615      	mov	r5, r2
 800615e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006162:	fb03 6711 	mls	r7, r3, r1, r6
 8006166:	5dc7      	ldrb	r7, [r0, r7]
 8006168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800616c:	4637      	mov	r7, r6
 800616e:	42bb      	cmp	r3, r7
 8006170:	460e      	mov	r6, r1
 8006172:	d9f4      	bls.n	800615e <_printf_i+0x116>
 8006174:	2b08      	cmp	r3, #8
 8006176:	d10b      	bne.n	8006190 <_printf_i+0x148>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07de      	lsls	r6, r3, #31
 800617c:	d508      	bpl.n	8006190 <_printf_i+0x148>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	4299      	cmp	r1, r3
 8006184:	bfde      	ittt	le
 8006186:	2330      	movle	r3, #48	; 0x30
 8006188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800618c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006190:	1b52      	subs	r2, r2, r5
 8006192:	6122      	str	r2, [r4, #16]
 8006194:	f8cd a000 	str.w	sl, [sp]
 8006198:	464b      	mov	r3, r9
 800619a:	aa03      	add	r2, sp, #12
 800619c:	4621      	mov	r1, r4
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff fee4 	bl	8005f6c <_printf_common>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d14a      	bne.n	800623e <_printf_i+0x1f6>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	b004      	add	sp, #16
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 0320 	orr.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	4833      	ldr	r0, [pc, #204]	; (8006288 <_printf_i+0x240>)
 80061bc:	2778      	movs	r7, #120	; 0x78
 80061be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	6829      	ldr	r1, [r5, #0]
 80061c6:	061f      	lsls	r7, r3, #24
 80061c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80061cc:	d402      	bmi.n	80061d4 <_printf_i+0x18c>
 80061ce:	065f      	lsls	r7, r3, #25
 80061d0:	bf48      	it	mi
 80061d2:	b2b6      	uxthmi	r6, r6
 80061d4:	07df      	lsls	r7, r3, #31
 80061d6:	bf48      	it	mi
 80061d8:	f043 0320 	orrmi.w	r3, r3, #32
 80061dc:	6029      	str	r1, [r5, #0]
 80061de:	bf48      	it	mi
 80061e0:	6023      	strmi	r3, [r4, #0]
 80061e2:	b91e      	cbnz	r6, 80061ec <_printf_i+0x1a4>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	f023 0320 	bic.w	r3, r3, #32
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	2310      	movs	r3, #16
 80061ee:	e7a7      	b.n	8006140 <_printf_i+0xf8>
 80061f0:	4824      	ldr	r0, [pc, #144]	; (8006284 <_printf_i+0x23c>)
 80061f2:	e7e4      	b.n	80061be <_printf_i+0x176>
 80061f4:	4615      	mov	r5, r2
 80061f6:	e7bd      	b.n	8006174 <_printf_i+0x12c>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	6826      	ldr	r6, [r4, #0]
 80061fc:	6961      	ldr	r1, [r4, #20]
 80061fe:	1d18      	adds	r0, r3, #4
 8006200:	6028      	str	r0, [r5, #0]
 8006202:	0635      	lsls	r5, r6, #24
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	d501      	bpl.n	800620c <_printf_i+0x1c4>
 8006208:	6019      	str	r1, [r3, #0]
 800620a:	e002      	b.n	8006212 <_printf_i+0x1ca>
 800620c:	0670      	lsls	r0, r6, #25
 800620e:	d5fb      	bpl.n	8006208 <_printf_i+0x1c0>
 8006210:	8019      	strh	r1, [r3, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	4615      	mov	r5, r2
 8006218:	e7bc      	b.n	8006194 <_printf_i+0x14c>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	602a      	str	r2, [r5, #0]
 8006220:	681d      	ldr	r5, [r3, #0]
 8006222:	6862      	ldr	r2, [r4, #4]
 8006224:	2100      	movs	r1, #0
 8006226:	4628      	mov	r0, r5
 8006228:	f7f9 ffd2 	bl	80001d0 <memchr>
 800622c:	b108      	cbz	r0, 8006232 <_printf_i+0x1ea>
 800622e:	1b40      	subs	r0, r0, r5
 8006230:	6060      	str	r0, [r4, #4]
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	2300      	movs	r3, #0
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623c:	e7aa      	b.n	8006194 <_printf_i+0x14c>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	462a      	mov	r2, r5
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d0ad      	beq.n	80061a8 <_printf_i+0x160>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	079b      	lsls	r3, r3, #30
 8006250:	d413      	bmi.n	800627a <_printf_i+0x232>
 8006252:	68e0      	ldr	r0, [r4, #12]
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	4298      	cmp	r0, r3
 8006258:	bfb8      	it	lt
 800625a:	4618      	movlt	r0, r3
 800625c:	e7a6      	b.n	80061ac <_printf_i+0x164>
 800625e:	2301      	movs	r3, #1
 8006260:	4632      	mov	r2, r6
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	47d0      	blx	sl
 8006268:	3001      	adds	r0, #1
 800626a:	d09d      	beq.n	80061a8 <_printf_i+0x160>
 800626c:	3501      	adds	r5, #1
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	9903      	ldr	r1, [sp, #12]
 8006272:	1a5b      	subs	r3, r3, r1
 8006274:	42ab      	cmp	r3, r5
 8006276:	dcf2      	bgt.n	800625e <_printf_i+0x216>
 8006278:	e7eb      	b.n	8006252 <_printf_i+0x20a>
 800627a:	2500      	movs	r5, #0
 800627c:	f104 0619 	add.w	r6, r4, #25
 8006280:	e7f5      	b.n	800626e <_printf_i+0x226>
 8006282:	bf00      	nop
 8006284:	08006abb 	.word	0x08006abb
 8006288:	08006acc 	.word	0x08006acc

0800628c <__sflush_r>:
 800628c:	898a      	ldrh	r2, [r1, #12]
 800628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	4605      	mov	r5, r0
 8006294:	0710      	lsls	r0, r2, #28
 8006296:	460c      	mov	r4, r1
 8006298:	d458      	bmi.n	800634c <__sflush_r+0xc0>
 800629a:	684b      	ldr	r3, [r1, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	dc05      	bgt.n	80062ac <__sflush_r+0x20>
 80062a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dc02      	bgt.n	80062ac <__sflush_r+0x20>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d0f9      	beq.n	80062a6 <__sflush_r+0x1a>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062b8:	682f      	ldr	r7, [r5, #0]
 80062ba:	6a21      	ldr	r1, [r4, #32]
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	d032      	beq.n	8006326 <__sflush_r+0x9a>
 80062c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	075a      	lsls	r2, r3, #29
 80062c6:	d505      	bpl.n	80062d4 <__sflush_r+0x48>
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	1ac0      	subs	r0, r0, r3
 80062cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ce:	b10b      	cbz	r3, 80062d4 <__sflush_r+0x48>
 80062d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	4602      	mov	r2, r0
 80062d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062da:	6a21      	ldr	r1, [r4, #32]
 80062dc:	4628      	mov	r0, r5
 80062de:	47b0      	blx	r6
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	d106      	bne.n	80062f4 <__sflush_r+0x68>
 80062e6:	6829      	ldr	r1, [r5, #0]
 80062e8:	291d      	cmp	r1, #29
 80062ea:	d82b      	bhi.n	8006344 <__sflush_r+0xb8>
 80062ec:	4a29      	ldr	r2, [pc, #164]	; (8006394 <__sflush_r+0x108>)
 80062ee:	410a      	asrs	r2, r1
 80062f0:	07d6      	lsls	r6, r2, #31
 80062f2:	d427      	bmi.n	8006344 <__sflush_r+0xb8>
 80062f4:	2200      	movs	r2, #0
 80062f6:	6062      	str	r2, [r4, #4]
 80062f8:	04d9      	lsls	r1, r3, #19
 80062fa:	6922      	ldr	r2, [r4, #16]
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	d504      	bpl.n	800630a <__sflush_r+0x7e>
 8006300:	1c42      	adds	r2, r0, #1
 8006302:	d101      	bne.n	8006308 <__sflush_r+0x7c>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b903      	cbnz	r3, 800630a <__sflush_r+0x7e>
 8006308:	6560      	str	r0, [r4, #84]	; 0x54
 800630a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800630c:	602f      	str	r7, [r5, #0]
 800630e:	2900      	cmp	r1, #0
 8006310:	d0c9      	beq.n	80062a6 <__sflush_r+0x1a>
 8006312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006316:	4299      	cmp	r1, r3
 8006318:	d002      	beq.n	8006320 <__sflush_r+0x94>
 800631a:	4628      	mov	r0, r5
 800631c:	f7ff fbea 	bl	8005af4 <_free_r>
 8006320:	2000      	movs	r0, #0
 8006322:	6360      	str	r0, [r4, #52]	; 0x34
 8006324:	e7c0      	b.n	80062a8 <__sflush_r+0x1c>
 8006326:	2301      	movs	r3, #1
 8006328:	4628      	mov	r0, r5
 800632a:	47b0      	blx	r6
 800632c:	1c41      	adds	r1, r0, #1
 800632e:	d1c8      	bne.n	80062c2 <__sflush_r+0x36>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0c5      	beq.n	80062c2 <__sflush_r+0x36>
 8006336:	2b1d      	cmp	r3, #29
 8006338:	d001      	beq.n	800633e <__sflush_r+0xb2>
 800633a:	2b16      	cmp	r3, #22
 800633c:	d101      	bne.n	8006342 <__sflush_r+0xb6>
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	e7b1      	b.n	80062a6 <__sflush_r+0x1a>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	e7ad      	b.n	80062a8 <__sflush_r+0x1c>
 800634c:	690f      	ldr	r7, [r1, #16]
 800634e:	2f00      	cmp	r7, #0
 8006350:	d0a9      	beq.n	80062a6 <__sflush_r+0x1a>
 8006352:	0793      	lsls	r3, r2, #30
 8006354:	680e      	ldr	r6, [r1, #0]
 8006356:	bf08      	it	eq
 8006358:	694b      	ldreq	r3, [r1, #20]
 800635a:	600f      	str	r7, [r1, #0]
 800635c:	bf18      	it	ne
 800635e:	2300      	movne	r3, #0
 8006360:	eba6 0807 	sub.w	r8, r6, r7
 8006364:	608b      	str	r3, [r1, #8]
 8006366:	f1b8 0f00 	cmp.w	r8, #0
 800636a:	dd9c      	ble.n	80062a6 <__sflush_r+0x1a>
 800636c:	6a21      	ldr	r1, [r4, #32]
 800636e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006370:	4643      	mov	r3, r8
 8006372:	463a      	mov	r2, r7
 8006374:	4628      	mov	r0, r5
 8006376:	47b0      	blx	r6
 8006378:	2800      	cmp	r0, #0
 800637a:	dc06      	bgt.n	800638a <__sflush_r+0xfe>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	e78e      	b.n	80062a8 <__sflush_r+0x1c>
 800638a:	4407      	add	r7, r0
 800638c:	eba8 0800 	sub.w	r8, r8, r0
 8006390:	e7e9      	b.n	8006366 <__sflush_r+0xda>
 8006392:	bf00      	nop
 8006394:	dfbffffe 	.word	0xdfbffffe

08006398 <_fflush_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	690b      	ldr	r3, [r1, #16]
 800639c:	4605      	mov	r5, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b913      	cbnz	r3, 80063a8 <_fflush_r+0x10>
 80063a2:	2500      	movs	r5, #0
 80063a4:	4628      	mov	r0, r5
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	b118      	cbz	r0, 80063b2 <_fflush_r+0x1a>
 80063aa:	6a03      	ldr	r3, [r0, #32]
 80063ac:	b90b      	cbnz	r3, 80063b2 <_fflush_r+0x1a>
 80063ae:	f7ff fa85 	bl	80058bc <__sinit>
 80063b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f3      	beq.n	80063a2 <_fflush_r+0xa>
 80063ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063bc:	07d0      	lsls	r0, r2, #31
 80063be:	d404      	bmi.n	80063ca <_fflush_r+0x32>
 80063c0:	0599      	lsls	r1, r3, #22
 80063c2:	d402      	bmi.n	80063ca <_fflush_r+0x32>
 80063c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063c6:	f7ff fb7d 	bl	8005ac4 <__retarget_lock_acquire_recursive>
 80063ca:	4628      	mov	r0, r5
 80063cc:	4621      	mov	r1, r4
 80063ce:	f7ff ff5d 	bl	800628c <__sflush_r>
 80063d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d4:	07da      	lsls	r2, r3, #31
 80063d6:	4605      	mov	r5, r0
 80063d8:	d4e4      	bmi.n	80063a4 <_fflush_r+0xc>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	059b      	lsls	r3, r3, #22
 80063de:	d4e1      	bmi.n	80063a4 <_fflush_r+0xc>
 80063e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e2:	f7ff fb70 	bl	8005ac6 <__retarget_lock_release_recursive>
 80063e6:	e7dd      	b.n	80063a4 <_fflush_r+0xc>

080063e8 <__swbuf_r>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	460e      	mov	r6, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	4605      	mov	r5, r0
 80063f0:	b118      	cbz	r0, 80063fa <__swbuf_r+0x12>
 80063f2:	6a03      	ldr	r3, [r0, #32]
 80063f4:	b90b      	cbnz	r3, 80063fa <__swbuf_r+0x12>
 80063f6:	f7ff fa61 	bl	80058bc <__sinit>
 80063fa:	69a3      	ldr	r3, [r4, #24]
 80063fc:	60a3      	str	r3, [r4, #8]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	071a      	lsls	r2, r3, #28
 8006402:	d525      	bpl.n	8006450 <__swbuf_r+0x68>
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	b31b      	cbz	r3, 8006450 <__swbuf_r+0x68>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	6922      	ldr	r2, [r4, #16]
 800640c:	1a98      	subs	r0, r3, r2
 800640e:	6963      	ldr	r3, [r4, #20]
 8006410:	b2f6      	uxtb	r6, r6
 8006412:	4283      	cmp	r3, r0
 8006414:	4637      	mov	r7, r6
 8006416:	dc04      	bgt.n	8006422 <__swbuf_r+0x3a>
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f7ff ffbc 	bl	8006398 <_fflush_r>
 8006420:	b9e0      	cbnz	r0, 800645c <__swbuf_r+0x74>
 8006422:	68a3      	ldr	r3, [r4, #8]
 8006424:	3b01      	subs	r3, #1
 8006426:	60a3      	str	r3, [r4, #8]
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	6022      	str	r2, [r4, #0]
 800642e:	701e      	strb	r6, [r3, #0]
 8006430:	6962      	ldr	r2, [r4, #20]
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	429a      	cmp	r2, r3
 8006436:	d004      	beq.n	8006442 <__swbuf_r+0x5a>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	07db      	lsls	r3, r3, #31
 800643c:	d506      	bpl.n	800644c <__swbuf_r+0x64>
 800643e:	2e0a      	cmp	r6, #10
 8006440:	d104      	bne.n	800644c <__swbuf_r+0x64>
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f7ff ffa7 	bl	8006398 <_fflush_r>
 800644a:	b938      	cbnz	r0, 800645c <__swbuf_r+0x74>
 800644c:	4638      	mov	r0, r7
 800644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f806 	bl	8006464 <__swsetup_r>
 8006458:	2800      	cmp	r0, #0
 800645a:	d0d5      	beq.n	8006408 <__swbuf_r+0x20>
 800645c:	f04f 37ff 	mov.w	r7, #4294967295
 8006460:	e7f4      	b.n	800644c <__swbuf_r+0x64>
	...

08006464 <__swsetup_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <__swsetup_r+0xac>)
 8006468:	4605      	mov	r5, r0
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	460c      	mov	r4, r1
 800646e:	b118      	cbz	r0, 8006478 <__swsetup_r+0x14>
 8006470:	6a03      	ldr	r3, [r0, #32]
 8006472:	b90b      	cbnz	r3, 8006478 <__swsetup_r+0x14>
 8006474:	f7ff fa22 	bl	80058bc <__sinit>
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800647e:	0718      	lsls	r0, r3, #28
 8006480:	d422      	bmi.n	80064c8 <__swsetup_r+0x64>
 8006482:	06d9      	lsls	r1, r3, #27
 8006484:	d407      	bmi.n	8006496 <__swsetup_r+0x32>
 8006486:	2309      	movs	r3, #9
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800648e:	81a3      	strh	r3, [r4, #12]
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	e034      	b.n	8006500 <__swsetup_r+0x9c>
 8006496:	0758      	lsls	r0, r3, #29
 8006498:	d512      	bpl.n	80064c0 <__swsetup_r+0x5c>
 800649a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649c:	b141      	cbz	r1, 80064b0 <__swsetup_r+0x4c>
 800649e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a2:	4299      	cmp	r1, r3
 80064a4:	d002      	beq.n	80064ac <__swsetup_r+0x48>
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff fb24 	bl	8005af4 <_free_r>
 80064ac:	2300      	movs	r3, #0
 80064ae:	6363      	str	r3, [r4, #52]	; 0x34
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	2300      	movs	r3, #0
 80064ba:	6063      	str	r3, [r4, #4]
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f043 0308 	orr.w	r3, r3, #8
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	b94b      	cbnz	r3, 80064e0 <__swsetup_r+0x7c>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d6:	d003      	beq.n	80064e0 <__swsetup_r+0x7c>
 80064d8:	4621      	mov	r1, r4
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 f894 	bl	8006608 <__smakebuf_r>
 80064e0:	89a0      	ldrh	r0, [r4, #12]
 80064e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e6:	f010 0301 	ands.w	r3, r0, #1
 80064ea:	d00a      	beq.n	8006502 <__swsetup_r+0x9e>
 80064ec:	2300      	movs	r3, #0
 80064ee:	60a3      	str	r3, [r4, #8]
 80064f0:	6963      	ldr	r3, [r4, #20]
 80064f2:	425b      	negs	r3, r3
 80064f4:	61a3      	str	r3, [r4, #24]
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	b943      	cbnz	r3, 800650c <__swsetup_r+0xa8>
 80064fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064fe:	d1c4      	bne.n	800648a <__swsetup_r+0x26>
 8006500:	bd38      	pop	{r3, r4, r5, pc}
 8006502:	0781      	lsls	r1, r0, #30
 8006504:	bf58      	it	pl
 8006506:	6963      	ldrpl	r3, [r4, #20]
 8006508:	60a3      	str	r3, [r4, #8]
 800650a:	e7f4      	b.n	80064f6 <__swsetup_r+0x92>
 800650c:	2000      	movs	r0, #0
 800650e:	e7f7      	b.n	8006500 <__swsetup_r+0x9c>
 8006510:	200000f4 	.word	0x200000f4

08006514 <_raise_r>:
 8006514:	291f      	cmp	r1, #31
 8006516:	b538      	push	{r3, r4, r5, lr}
 8006518:	4604      	mov	r4, r0
 800651a:	460d      	mov	r5, r1
 800651c:	d904      	bls.n	8006528 <_raise_r+0x14>
 800651e:	2316      	movs	r3, #22
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	f04f 30ff 	mov.w	r0, #4294967295
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800652a:	b112      	cbz	r2, 8006532 <_raise_r+0x1e>
 800652c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006530:	b94b      	cbnz	r3, 8006546 <_raise_r+0x32>
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f830 	bl	8006598 <_getpid_r>
 8006538:	462a      	mov	r2, r5
 800653a:	4601      	mov	r1, r0
 800653c:	4620      	mov	r0, r4
 800653e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006542:	f000 b817 	b.w	8006574 <_kill_r>
 8006546:	2b01      	cmp	r3, #1
 8006548:	d00a      	beq.n	8006560 <_raise_r+0x4c>
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	d103      	bne.n	8006556 <_raise_r+0x42>
 800654e:	2316      	movs	r3, #22
 8006550:	6003      	str	r3, [r0, #0]
 8006552:	2001      	movs	r0, #1
 8006554:	e7e7      	b.n	8006526 <_raise_r+0x12>
 8006556:	2400      	movs	r4, #0
 8006558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800655c:	4628      	mov	r0, r5
 800655e:	4798      	blx	r3
 8006560:	2000      	movs	r0, #0
 8006562:	e7e0      	b.n	8006526 <_raise_r+0x12>

08006564 <raise>:
 8006564:	4b02      	ldr	r3, [pc, #8]	; (8006570 <raise+0xc>)
 8006566:	4601      	mov	r1, r0
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f7ff bfd3 	b.w	8006514 <_raise_r>
 800656e:	bf00      	nop
 8006570:	200000f4 	.word	0x200000f4

08006574 <_kill_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	; (8006594 <_kill_r+0x20>)
 8006578:	2300      	movs	r3, #0
 800657a:	4604      	mov	r4, r0
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	f7fa ff25 	bl	80013d0 <_kill>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	d102      	bne.n	8006590 <_kill_r+0x1c>
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	b103      	cbz	r3, 8006590 <_kill_r+0x1c>
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	bd38      	pop	{r3, r4, r5, pc}
 8006592:	bf00      	nop
 8006594:	200004f8 	.word	0x200004f8

08006598 <_getpid_r>:
 8006598:	f7fa bf12 	b.w	80013c0 <_getpid>

0800659c <_sbrk_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d06      	ldr	r5, [pc, #24]	; (80065b8 <_sbrk_r+0x1c>)
 80065a0:	2300      	movs	r3, #0
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	602b      	str	r3, [r5, #0]
 80065a8:	f7fa ff9a 	bl	80014e0 <_sbrk>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_sbrk_r+0x1a>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_sbrk_r+0x1a>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	200004f8 	.word	0x200004f8

080065bc <__swhatbuf_r>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	460c      	mov	r4, r1
 80065c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c4:	2900      	cmp	r1, #0
 80065c6:	b096      	sub	sp, #88	; 0x58
 80065c8:	4615      	mov	r5, r2
 80065ca:	461e      	mov	r6, r3
 80065cc:	da0d      	bge.n	80065ea <__swhatbuf_r+0x2e>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065d4:	f04f 0100 	mov.w	r1, #0
 80065d8:	bf0c      	ite	eq
 80065da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065de:	2340      	movne	r3, #64	; 0x40
 80065e0:	2000      	movs	r0, #0
 80065e2:	6031      	str	r1, [r6, #0]
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	b016      	add	sp, #88	; 0x58
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	466a      	mov	r2, sp
 80065ec:	f000 f848 	bl	8006680 <_fstat_r>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	dbec      	blt.n	80065ce <__swhatbuf_r+0x12>
 80065f4:	9901      	ldr	r1, [sp, #4]
 80065f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065fe:	4259      	negs	r1, r3
 8006600:	4159      	adcs	r1, r3
 8006602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006606:	e7eb      	b.n	80065e0 <__swhatbuf_r+0x24>

08006608 <__smakebuf_r>:
 8006608:	898b      	ldrh	r3, [r1, #12]
 800660a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800660c:	079d      	lsls	r5, r3, #30
 800660e:	4606      	mov	r6, r0
 8006610:	460c      	mov	r4, r1
 8006612:	d507      	bpl.n	8006624 <__smakebuf_r+0x1c>
 8006614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	2301      	movs	r3, #1
 800661e:	6163      	str	r3, [r4, #20]
 8006620:	b002      	add	sp, #8
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	ab01      	add	r3, sp, #4
 8006626:	466a      	mov	r2, sp
 8006628:	f7ff ffc8 	bl	80065bc <__swhatbuf_r>
 800662c:	9900      	ldr	r1, [sp, #0]
 800662e:	4605      	mov	r5, r0
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff facb 	bl	8005bcc <_malloc_r>
 8006636:	b948      	cbnz	r0, 800664c <__smakebuf_r+0x44>
 8006638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663c:	059a      	lsls	r2, r3, #22
 800663e:	d4ef      	bmi.n	8006620 <__smakebuf_r+0x18>
 8006640:	f023 0303 	bic.w	r3, r3, #3
 8006644:	f043 0302 	orr.w	r3, r3, #2
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	e7e3      	b.n	8006614 <__smakebuf_r+0xc>
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	6020      	str	r0, [r4, #0]
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	6163      	str	r3, [r4, #20]
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	6120      	str	r0, [r4, #16]
 800665e:	b15b      	cbz	r3, 8006678 <__smakebuf_r+0x70>
 8006660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006664:	4630      	mov	r0, r6
 8006666:	f000 f81d 	bl	80066a4 <_isatty_r>
 800666a:	b128      	cbz	r0, 8006678 <__smakebuf_r+0x70>
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	431d      	orrs	r5, r3
 800667c:	81a5      	strh	r5, [r4, #12]
 800667e:	e7cf      	b.n	8006620 <__smakebuf_r+0x18>

08006680 <_fstat_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4d07      	ldr	r5, [pc, #28]	; (80066a0 <_fstat_r+0x20>)
 8006684:	2300      	movs	r3, #0
 8006686:	4604      	mov	r4, r0
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	f7fa fefe 	bl	800148e <_fstat>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d102      	bne.n	800669c <_fstat_r+0x1c>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	b103      	cbz	r3, 800669c <_fstat_r+0x1c>
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	bd38      	pop	{r3, r4, r5, pc}
 800669e:	bf00      	nop
 80066a0:	200004f8 	.word	0x200004f8

080066a4 <_isatty_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d06      	ldr	r5, [pc, #24]	; (80066c0 <_isatty_r+0x1c>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	f7fa fefd 	bl	80014ae <_isatty>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_isatty_r+0x1a>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_isatty_r+0x1a>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	200004f8 	.word	0x200004f8

080066c4 <_init>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr

080066d0 <_fini>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr
